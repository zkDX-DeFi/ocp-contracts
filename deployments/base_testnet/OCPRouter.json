{
  "address": "0x511b23d8D3FB09ad6C98d61390E2e22Eb8349422",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "contract IOCPBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct Structs.LzTxObj",
          "name": "_lzTxParams",
          "type": "tuple"
        }
      ],
      "name": "omniMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct Structs.LzTxObj",
          "name": "_lzTxParams",
          "type": "tuple"
        }
      ],
      "name": "omniMintETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "srcToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct Structs.MintObj",
          "name": "_mintParams",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_lzEndpoint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_dstGasForCall",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "omniMintRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct Structs.LzTxObj",
          "name": "_lzTxParams",
          "type": "tuple"
        }
      ],
      "name": "omniRedeem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "srcToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "internalType": "struct Structs.RedeemObj",
          "name": "_redeemParams",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_dstGasForCall",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "omniRedeemRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFactory",
      "outputs": [
        {
          "internalType": "contract IOCPoolFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_userPayload",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct Structs.LzTxObj",
          "name": "_lzTxParams",
          "type": "tuple"
        }
      ],
      "name": "quoteLayerZeroFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenManager",
      "outputs": [
        {
          "internalType": "contract IOCPOmniTokenManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        }
      ],
      "name": "updateBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf074cd6034a4d7a8814dde802fa9cce91167bdfcb3c1fed3daba6c2daf6a0799",
  "receipt": {
    "to": null,
    "from": "0xafc183BE937367B219F9283916d352f2C03ff512",
    "contractAddress": "0x511b23d8D3FB09ad6C98d61390E2e22Eb8349422",
    "transactionIndex": 2,
    "gasUsed": "2397798",
    "logsBloom": "0x
    "blockHash": "0x4c0497c6b0265d27930dda6e41a768a235ed15a9ff7d1c67734ab83a13e481ff",
    "transactionHash": "0xf074cd6034a4d7a8814dde802fa9cce91167bdfcb3c1fed3daba6c2daf6a0799",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 11551848,
        "transactionHash": "0xf074cd6034a4d7a8814dde802fa9cce91167bdfcb3c1fed3daba6c2daf6a0799",
        "address": "0x511b23d8D3FB09ad6C98d61390E2e22Eb8349422",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000afc183be937367b219f9283916d352f2c03ff512"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x4c0497c6b0265d27930dda6e41a768a235ed15a9ff7d1c67734ab83a13e481ff"
      }
    ],
    "blockNumber": 11551848,
    "cumulativeGasUsed": "2491300",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2ab07bedb8EB5e10551A356fd09BCe717C0B7Dc1",
    "0xF1d233082B4736F34BB9b9F094528101c6799695",
    "0xe47e31CFF462f283d035D58A118f6D785F010239",
    "0xd25C8ed51e8EAC3D32468000dE4D1D8dea90D0ED"
  ],
  "numDeployments": 1,
  "solcInputHash": "0a2d82b1c8a8dff344a9048cc530ed0d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contract IOCPBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct Structs.LzTxObj\",\"name\":\"_lzTxParams\",\"type\":\"tuple\"}],\"name\":\"omniMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct Structs.LzTxObj\",\"name\":\"_lzTxParams\",\"type\":\"tuple\"}],\"name\":\"omniMintETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct Structs.MintObj\",\"name\":\"_mintParams\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"omniMintRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct Structs.LzTxObj\",\"name\":\"_lzTxParams\",\"type\":\"tuple\"}],\"name\":\"omniRedeem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"internalType\":\"struct Structs.RedeemObj\",\"name\":\"_redeemParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"omniRedeemRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFactory\",\"outputs\":[{\"internalType\":\"contract IOCPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_userPayload\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct Structs.LzTxObj\",\"name\":\"_lzTxParams\",\"type\":\"tuple\"}],\"name\":\"quoteLayerZeroFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"internalType\":\"contract IOCPOmniTokenManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"updateBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\",\"params\":{\"_bridge\":\"The address of the bridge contract.\",\"_poolFactory\":\"The address of the pool factory contract.\",\"_tokenManager\":\"The address of the token manager contract.\",\"_weth\":\"The address of the WETH contract.\"}},\"omniMint(uint16,address,uint256,address,uint8,address,bytes,(uint256,uint256,bytes))\":{\"details\":\"Transfers tokens from sender to receiver on the same chain. If the `getPool` is not deployed, it will be deployed. If the `getPool` is deployed, it will be used. `_token` cannot be the zero address and it will be transferred from sender to receiver. `_omniMint` will be called to mint the token on the receiver chain. Requirements: - `_token` cannot be the zero address. - `_to` cannot be the zero address. - `_amountIn` must be greater than 0.\",\"params\":{\"_amountIn\":\"The amount of tokens to transfer.\",\"_lzTxParams\":\"The layer zero transaction parameters.\",\"_payload\":\"The payload to send to the receiver.\",\"_refundAddress\":\"The address to refund the fee to.\",\"_remoteChainId\":\"The chain id of the receiver.\",\"_to\":\"The address of the receiver.\",\"_token\":\"The address of the token to transfer.\",\"_type\":\"The type of the transaction.\"}},\"omniMintRemote(uint16,bytes,uint256,uint8,(address,address,uint256,address,string,string),address,uint256,bytes)\":{\"details\":\"Transfers tokens from sender to receiver on the same chain. Requirements: - `_token` cannot be the zero address. - `_to` cannot be the zero address. - `_amountIn` must be greater than 0. - only the bridge can call this function.\",\"params\":{\"_dstGasForCall\":\"The gas for the call.\",\"_lzEndpoint\":\"The layer zero endpoint.\",\"_mintParams\":\"The mint parameters.\",\"_nonce\":\"The nonce of the transaction.\",\"_payload\":\"The payload to send to the receiver.\",\"_srcAddress\":\"The address of the sender.\",\"_srcChainId\":\"The chain id of the sender.\",\"_type\":\"The type of the transaction.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"quoteLayerZeroFee(uint16,uint8,bytes,(uint256,uint256,bytes))\":{\"details\":\"Transfers tokens from sender to receiver on the same chain. Invoke the `bridge` to get quote for the fee and amount of token on the other chain.\",\"params\":{\"_lzTxParams\":\"The layer zero transaction parameters.\",\"_remoteChainId\":\"The chain id of the receiver.\",\"_type\":\"The type of the transaction.\",\"_userPayload\":\"The payload to send to the receiver.\"},\"returns\":{\"_0\":\"The amount of token on the other chain and the fee to send to the bridge.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBridge(address)\":{\"details\":\"update the bridge address. Requirements: - only the owner can call this function.\",\"params\":{\"_bridge\":\"The address of the bridge contract.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OCPRouter.sol\":\"OCPRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/OCPRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IOCPoolFactory.sol\\\";\\nimport \\\"./interfaces/IOCPOmniTokenManager.sol\\\";\\nimport \\\"./interfaces/IOCPRouter.sol\\\";\\nimport \\\"./interfaces/IOCPReceiver.sol\\\";\\nimport \\\"./interfaces/IOCPBridge.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./libraries/Types.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract OCPRouter is IOCPRouter, Ownable, ReentrancyGuard {\\n\\n    using SafeERC20 for IERC20;\\n    IOCPoolFactory public poolFactory;\\n    IOCPOmniTokenManager public tokenManager;\\n    IOCPBridge public bridge;\\n    address public weth;\\n\\n    /**\\n        * @dev Initializes the contract setting the deployer as the initial owner.\\n\\n        * @param _poolFactory The address of the pool factory contract.\\n        * @param _tokenManager The address of the token manager contract.\\n        * @param _bridge The address of the bridge contract.\\n        * @param _weth The address of the WETH contract.\\n    */\\n    constructor(address _poolFactory, address _tokenManager, address _bridge, address _weth) {\\n        poolFactory = IOCPoolFactory(_poolFactory);\\n        tokenManager = IOCPOmniTokenManager(_tokenManager);\\n        bridge = IOCPBridge(_bridge);\\n        weth = _weth;\\n    }\\n\\n    modifier onlyBridge() {\\n        require(msg.sender == address(bridge), \\\"OCPRouter: caller is not the bridge\\\");\\n        _;\\n    }\\n\\n    /**\\n        * @dev Transfers tokens from sender to receiver on the same chain.\\n\\n        * If the `getPool` is not deployed, it will be deployed.\\n\\n        * If the `getPool` is deployed, it will be used.\\n\\n        * `_token` cannot be the zero address and it will be transferred from sender to receiver.\\n\\n        * `_omniMint` will be called to mint the token on the receiver chain.\\n\\n        * Requirements:\\n\\n        * - `_token` cannot be the zero address.\\n\\n        * - `_to` cannot be the zero address.\\n\\n        * - `_amountIn` must be greater than 0.\\n\\n        * @param _remoteChainId The chain id of the receiver.\\n        * @param _token The address of the token to transfer.\\n        * @param _amountIn The amount of tokens to transfer.\\n        * @param _to The address of the receiver.\\n        * @param _type The type of the transaction.\\n        * @param _refundAddress The address to refund the fee to.\\n        * @param _payload The payload to send to the receiver.\\n        * @param _lzTxParams The layer zero transaction parameters.\\n    */\\n    function omniMint(\\n        uint16 _remoteChainId,\\n        address _token,\\n        uint256 _amountIn,\\n        address _to,\\n        uint8 _type,\\n        address payable _refundAddress,\\n        bytes memory _payload,\\n        Structs.LzTxObj memory _lzTxParams\\n    ) external override payable {\\n        require(_type == Types.TYPE_DEPLOY_AND_MINT || _type == Types.TYPE_MINT, \\\"OCPRouter: invalid type\\\");\\n        console.log(\\\"# OCPR.address: \\\", address(this));\\n        console.log(\\\"# OCPR.omniMint => _token: \\\", _token);\\n\\n        require(_token != address(0), \\\"OCPRouter: token invalid\\\");\\n        require(_to != address(0), \\\"OCPRouter: receiver invalid\\\");\\n        require(_amountIn > 0, \\\"OCPRouter: amountIn must be greater than 0\\\");\\n\\n        address _pool = poolFactory.getPool(_token);\\n        if (_pool == address(0)) _pool = poolFactory.createPool(_token);\\n        IERC20(_token).safeTransferFrom(msg.sender, _pool, _amountIn);\\n\\n        _omniMint(_token, _remoteChainId, _amountIn, _to, _type, _refundAddress, _payload, _lzTxParams, msg.value);\\n    }\\n\\n    function omniMintETH(\\n        uint16 _remoteChainId,\\n        uint256 _amountIn,\\n        address _to,\\n        uint8 _type,\\n        address payable _refundAddress,\\n        bytes memory _payload,\\n        Structs.LzTxObj memory _lzTxParams\\n    ) external override payable {\\n        require(msg.value > _amountIn, \\\"OCPRouter: send value must be greater than amountIn\\\");\\n        require(weth != address(0), \\\"OCPRouter: weth not set yet\\\");\\n        require(_to != address(0), \\\"OCPRouter: receiver invalid\\\");\\n        require(_amountIn > 0, \\\"OCPRouter: amountIn must be greater than 0\\\");\\n\\n        IWETH(weth).deposit{value: _amountIn}();\\n\\n        address _pool = poolFactory.getPool(weth);\\n        if (_pool == address(0)) _pool = poolFactory.createPool(weth);\\n        IERC20(weth).safeTransfer(_pool, _amountIn);\\n\\n        _omniMint(weth, _remoteChainId, _amountIn, _to, _type, _refundAddress, _payload, _lzTxParams, msg.value - _amountIn);\\n    }\\n\\n    /**\\n        * @dev Transfers tokens from sender to receiver on the same chain.\\n\\n        * If the `_needDeploy` is true, the token will be deployed on the receiver chain and `type` will be `TYPE_DEPLOY_AND_MINT`.\\n\\n        * If the `_needDeploy` is false, the token will not be deployed on the receiver chain and `type` will be `TYPE_MINT`.\\n\\n        * Requirements:\\n\\n            * - `_token` cannot be the zero address.\\n\\n            * - `_to` cannot be the zero address.\\n\\n            * - `_amountIn` must be greater than 0.\\n\\n        * @param _token The address of the token to transfer.\\n        * @param _remoteChainId The chain id of the receiver.\\n        * @param _amountIn The amount of tokens to transfer.\\n        * @param _to The address of the receiver.\\n        * @param _type The type of the transaction.\\n        * @param _refundAddress The address to refund the fee to.\\n        * @param _payload The payload to send to the receiver.\\n        * @param _lzTxParams The layer zero transaction parameters.\\n        * @param _msgFee The fee to send to the bridge.\\n    */\\n    function _omniMint(\\n        address _token,\\n        uint16 _remoteChainId,\\n        uint256 _amountIn,\\n        address _to,\\n        uint8 _type,\\n        address payable _refundAddress,\\n        bytes memory _payload,\\n        Structs.LzTxObj memory _lzTxParams,\\n        uint256 _msgFee\\n    ) internal {\\n        Structs.MintObj memory mintParams;\\n        mintParams.srcToken = _token;\\n        mintParams.sender = msg.sender;\\n        mintParams.amount = _amountD18(_token, _amountIn);\\n        mintParams.to = _to;\\n        if (_type == Types.TYPE_DEPLOY_AND_MINT) {\\n            mintParams.name = IERC20Metadata(_token).name();\\n            mintParams.symbol = IERC20Metadata(_token).symbol();\\n        }\\n\\n        bridge.omniMint{value: _msgFee}(_remoteChainId, _refundAddress, _type, mintParams, _payload, _lzTxParams);\\n    }\\n\\n    function omniRedeem(\\n        uint16 _remoteChainId,\\n        address _token,\\n        uint256 _amountIn,\\n        address _to,\\n        address payable _refundAddress,\\n        bytes memory _payload,\\n        Structs.LzTxObj memory _lzTxParams\\n    ) external override payable {\\n        require(_to != address(0), \\\"OCPRouter: receiver invalid\\\");\\n        require(_amountIn > 0, \\\"OCPRouter: amountIn must be greater than 0\\\");\\n\\n        Structs.RedeemObj memory redeemParams;\\n        redeemParams.srcToken = tokenManager.sourceTokens(_token, _remoteChainId);\\n        require(redeemParams.srcToken != address(0x0), \\\"OCPRouter: no srcToken on destination chain\\\");\\n        redeemParams.sender = msg.sender;\\n        redeemParams.amount = _amountIn;\\n        redeemParams.to = _to;\\n\\n        // burn local token\\n        tokenManager.omniBurn(_token, _amountIn, msg.sender);\\n\\n        // redeem src token\\n        bridge.omniRedeem{value: msg.value}(_remoteChainId, _refundAddress, Types.TYPE_REDEEM, redeemParams,\\n            _payload, _lzTxParams);\\n    }\\n\\n    /**\\n        * @dev return the amount of token for the given amount of token on the other chain.\\n\\n        * @param _token The address of the token.\\n        * @param _amount The amount of token.\\n        * @return The amount of token on the other chain.\\n    */\\n    function _amountD18(address _token, uint256 _amount) internal view returns (uint256) {\\n        uint256 decimals = IERC20Metadata(_token).decimals();\\n        if (decimals == 18) return _amount;\\n        return _amount * (10 ** (18 - decimals));\\n    }\\n\\n    function _amountLocal(address _token, uint256 _amount) internal view returns (uint256) {\\n        uint256 decimals = IERC20Metadata(_token).decimals();\\n        if (decimals == 18) return _amount;\\n        return _amount / (10 ** (18 - decimals));\\n    }\\n\\n    /**\\n        * @dev Transfers tokens from sender to receiver on the same chain.\\n\\n        * Invoke the `bridge` to get quote for the fee and amount of token on the other chain.\\n\\n        * @param _remoteChainId The chain id of the receiver.\\n        * @param _type The type of the transaction.\\n        * @param _userPayload The payload to send to the receiver.\\n        * @param _lzTxParams The layer zero transaction parameters.\\n        * @return The amount of token on the other chain and the fee to send to the bridge.\\n    */\\n    function quoteLayerZeroFee(\\n        uint16 _remoteChainId,\\n        uint8 _type,\\n        bytes calldata _userPayload,\\n        Structs.LzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256) {\\n        return bridge.quoteLayerZeroFee(_remoteChainId, _type, _userPayload, _lzTxParams);\\n    }\\n\\n    /**\\n        * @dev Transfers tokens from sender to receiver on the same chain.\\n\\n        * Requirements:\\n\\n            * - `_token` cannot be the zero address.\\n\\n            * - `_to` cannot be the zero address.\\n\\n            * - `_amountIn` must be greater than 0.\\n\\n            * - only the bridge can call this function.\\n\\n        * @param _srcChainId The chain id of the sender.\\n        * @param _srcAddress The address of the sender.\\n        * @param _nonce The nonce of the transaction.\\n        * @param _type The type of the transaction.\\n        * @param _mintParams The mint parameters.\\n        * @param _lzEndpoint The layer zero endpoint.\\n        * @param _dstGasForCall The gas for the call.\\n        * @param _payload The payload to send to the receiver.\\n    */\\n    function omniMintRemote(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        uint8 _type,\\n        Structs.MintObj memory _mintParams,\\n        address _lzEndpoint,\\n        uint256 _dstGasForCall,\\n        bytes memory _payload\\n    ) external onlyBridge {\\n        console.log(\\\"# OCPR.address: \\\", address(this));\\n        console.log(\\\"# OCPR.omniMintRemote => _mintParams.srcToken: \\\", _mintParams.srcToken);\\n        console.log(\\\"# OCPR.omniMintRemote => _type: \\\", _type);\\n        console.log(\\\"# OCPR.omniMintRemote => _mintParams.to: \\\", _mintParams.to);\\n\\n        address token = tokenManager.omniTokens(_mintParams.srcToken, _srcChainId);\\n        if (_type == Types.TYPE_DEPLOY_AND_MINT) {\\n            if (token == address(0))\\n                token = tokenManager.createOmniToken(_mintParams, _lzEndpoint, _srcChainId);\\n            else\\n                tokenManager.omniMint(_mintParams, _srcChainId);\\n        } else {\\n            tokenManager.omniMint(_mintParams, _srcChainId);\\n        }\\n\\n        if (_payload.length > 0) {\\n            console.log(\\\"# OCPR.omniMintRemote => _payload.length>0\\\");\\n            IOCPReceiver(_mintParams.to).ocpReceive{gas: _dstGasForCall}(_srcChainId, _srcAddress, _nonce, token,\\n                _mintParams.amount, _payload);\\n        }\\n    }\\n\\n    function omniRedeemRemote(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        Structs.RedeemObj memory _redeemParams,\\n        uint256 _dstGasForCall,\\n        bytes memory _payload\\n    ) external onlyBridge {\\n        uint256 _amount = _amountLocal(_redeemParams.srcToken, _redeemParams.amount);\\n        console.log(\\\"# _amount: \\\", _amount);\\n        if (_redeemParams.srcToken != weth) {\\n            poolFactory.withdraw(_redeemParams.srcToken, _redeemParams.to, _amount);\\n        } else {\\n            poolFactory.withdraw(weth, address(this), _amount);\\n            IWETH(weth).withdraw(_amount);\\n            (bool sent,) = _redeemParams.to.call{value: _amount}(\\\"\\\");\\n            require(sent, \\\"OCPRouter: failed to send ether\\\");\\n        }\\n\\n        console.log(\\\"# _payload.length: \\\", _payload.length);\\n        if (_payload.length > 0) {\\n            IOCPReceiver(_redeemParams.to).ocpReceive{gas: _dstGasForCall}(_srcChainId, _srcAddress, _nonce,\\n                _redeemParams.srcToken, _amount, _payload);\\n        }\\n    }\\n\\n    /**\\n        * @dev update the bridge address.\\n\\n        * Requirements:\\n\\n            * - only the owner can call this function.\\n\\n        * @param _bridge The address of the bridge contract.\\n    */\\n    function updateBridge(address _bridge) external onlyOwner {\\n        bridge = IOCPBridge(_bridge);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x59ce457364c44529e7c4f75bd383d6d5278c16d58f7b1baa3f621761f2ea177c\",\"license\":\"MIT\"},\"contracts/interfaces/IOCPBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\nimport \\\"../libraries/Structs.sol\\\";\\ninterface IOCPBridge {\\n\\n    function omniMint(\\n        uint16 _remoteChainId,\\n        address payable _refundAddress,\\n        uint8 _type,\\n        Structs.MintObj memory _mintParams,\\n        bytes memory _payload,\\n        Structs.LzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function omniRedeem(\\n        uint16 _remoteChainId,\\n        address payable _refundAddress,\\n        uint8 _type,\\n        Structs.RedeemObj memory _redeemParams,\\n        bytes memory _payload,\\n        Structs.LzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _remoteChainId,\\n        uint8 _type,\\n        bytes calldata _userPayload,\\n        Structs.LzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x2e9556e0bd2f1e0eae7860f904c76a4109f3f54b0a64b1f9941439a9f45d7bd8\",\"license\":\"MIT\"},\"contracts/interfaces/IOCPOmniTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\nimport \\\"../libraries/Structs.sol\\\";\\ninterface IOCPOmniTokenManager {\\n    function omniTokens(address _srcToken, uint16 _chainId) external view returns (address token);\\n    function sourceTokens(address _omniToken, uint16 _chainId) external view returns (address token);\\n    function createOmniToken(Structs.MintObj memory _mintParams, address _lzEndpoint, uint16 _srcChainId) external returns (address token);\\n    function omniMint(Structs.MintObj memory _mintParams, uint16 _srcChainId) external returns (address token);\\n    function omniBurn(address _omniToken, uint256 _amount, address _from) external;\\n}\\n\",\"keccak256\":\"0x6744f084633e6b18f0193854b7684cd36f4954f924ce09ae4d6955a68ab34b96\",\"license\":\"MIT\"},\"contracts/interfaces/IOCPReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IOCPReceiver {\\n\\n    function ocpReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 _amount,\\n        bytes memory _payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1b7e2985fe75c8510def92fe91c5e2bc2672bbfc478e35dcf84d455469a4a4a2\",\"license\":\"MIT\"},\"contracts/interfaces/IOCPRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../libraries/Structs.sol\\\";\\n\\ninterface IOCPRouter {\\n\\n    function omniMint(\\n        uint16 _remoteChainId,\\n        address _token,\\n        uint256 _amountIn,\\n        address _to,\\n        uint8 _type,\\n        address payable _refundAddress,\\n        bytes memory _payload,\\n        Structs.LzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function omniMintETH(\\n        uint16 _remoteChainId,\\n        uint256 _amountIn,\\n        address _to,\\n        uint8 _type,\\n        address payable _refundAddress,\\n        bytes memory _payload,\\n        Structs.LzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function omniMintRemote(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        uint8 _type,\\n        Structs.MintObj memory _mintParams,\\n        address _lzEndpoint,\\n        uint256 _dstGasForCall,\\n        bytes memory payload\\n    ) external;\\n\\n    function omniRedeem(\\n        uint16 _remoteChainId,\\n        address _token,\\n        uint256 _amountIn,\\n        address _to,\\n        address payable _refundAddress,\\n        bytes memory _payload,\\n        Structs.LzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function omniRedeemRemote(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        Structs.RedeemObj memory _redeemParams,\\n        uint256 _dstGasForCall,\\n        bytes memory _payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa91a53131a9e68ba14cb9bd9bd6a39bfec733d119d6d8de9c7d21c694f60cba3\",\"license\":\"MIT\"},\"contracts/interfaces/IOCPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\nimport \\\"../libraries/Structs.sol\\\";\\ninterface IOCPoolFactory {\\n    function getPool(address _token) external view returns (address pool);\\n    function createPool(address _token) external returns (address pool);\\n    function withdraw(address _token, address _receiver, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xe5100da6909da9a426e4e8027916767a40af34bca8159c84f84e2212997badd1\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0xdc7f7fb4d7af2043a7fa9dc538106357bf1ec7ae411e85aa741baf8794ba669f\",\"license\":\"MIT\"},\"contracts/libraries/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary Structs {\\n\\n    struct LzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    struct MintObj {\\n        address srcToken;\\n        address sender;\\n        uint256 amount;\\n        address to;\\n        string name;\\n        string symbol;\\n    }\\n\\n    struct RedeemObj {\\n        address srcToken;\\n        address sender;\\n        uint256 amount;\\n        address to;\\n    }\\n\\n    struct CachedMint {\\n        address token;\\n        uint256 amount;\\n        address to;\\n        bytes payload;\\n    }\\n}\\n\",\"keccak256\":\"0x67ca2ef543cf813bf96fe8eea337455ab4427b9ccb75bdb79cf96eda8590bfa8\",\"license\":\"MIT\"},\"contracts/libraries/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary Types {\\n\\n    uint8 public constant TYPE_DEPLOY_AND_MINT = 1;\\n    uint8 public constant TYPE_MINT = 2;\\n    uint8 public constant TYPE_REDEEM = 3;\\n\\n}\\n\",\"keccak256\":\"0x640dad0714b713e43861884f2379f0ba7b8201f1d6892a2f3227c508c905424b\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200294d3803806200294d833981016040819052620000349162000104565b6200003f3362000097565b60018055600280546001600160a01b039586166001600160a01b031991821617909155600380549486169482169490941790935560048054928516928416929092179091556005805491909316911617905562000161565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000ff57600080fd5b919050565b600080600080608085870312156200011b57600080fd5b6200012685620000e7565b93506200013660208601620000e7565b92506200014660408601620000e7565b91506200015660608601620000e7565b905092959194509250565b6127dc80620001716000396000f3fe6080604052600436106100c15760003560e01c8063715018a61161006f578063715018a6146101c0578063898f3a08146101d55780638da5cb5b146101e8578063e78cea9214610206578063eb8092dd14610226578063f1ff466b14610246578063f2fde38b1461026657600080fd5b80632a709b14146100cd5780633fc8cef3146101035780634219dc401461012357806345aece1e1461014357806350df239b146101585780636aadba541461018d5780636eb38212146101a057600080fd5b366100c857005b600080fd5b3480156100d957600080fd5b506003546100ed906001600160a01b031681565b6040516100fa91906119ca565b60405180910390f35b34801561010f57600080fd5b506005546100ed906001600160a01b031681565b34801561012f57600080fd5b506002546100ed906001600160a01b031681565b610156610151366004611bb4565b610286565b005b34801561016457600080fd5b50610178610173366004611c69565b610547565b604080519283526020830191909152016100fa565b61015661019b366004611d23565b6105cf565b3480156101ac57600080fd5b506101566101bb366004611deb565b61085b565b3480156101cc57600080fd5b50610156610885565b6101566101e3366004611e0f565b610899565b3480156101f457600080fd5b506000546001600160a01b03166100ed565b34801561021257600080fd5b506004546100ed906001600160a01b031681565b34801561023257600080fd5b50610156610241366004611f05565b610ae2565b34801561025257600080fd5b50610156610261366004611fc2565b610e78565b34801561027257600080fd5b50610156610281366004611deb565b611195565b8534116102f65760405162461bcd60e51b815260206004820152603360248201527f4f4350526f757465723a2073656e642076616c7565206d75737420626520677260448201527232b0ba32b9103a3430b71030b6b7bab73a24b760691b60648201526084015b60405180910390fd5b6005546001600160a01b031661034e5760405162461bcd60e51b815260206004820152601b60248201527f4f4350526f757465723a2077657468206e6f742073657420796574000000000060448201526064016102ed565b6001600160a01b0385166103745760405162461bcd60e51b81526004016102ed906120b5565b600086116103945760405162461bcd60e51b81526004016102ed906120ec565b600560009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0876040518263ffffffff1660e01b81526004016000604051808303818588803b1580156103e457600080fd5b505af11580156103f8573d6000803e3d6000fd5b505060025460055460405163bbe4f6db60e01b8152600095506001600160a01b03928316945063bbe4f6db935061043592909116906004016119ca565b602060405180830381865afa158015610452573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104769190612136565b90506001600160a01b03811661050057600254600554604051634824fce960e11b81526001600160a01b0392831692639049f9d2926104ba929116906004016119ca565b6020604051808303816000875af11580156104d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fd9190612136565b90505b600554610517906001600160a01b0316828961120e565b60055461053d906001600160a01b0316898989898989896105388634612169565b611276565b5050505050505050565b600480546040516350df239b60e01b815260009283926001600160a01b0316916350df239b91610581918b918b918b918b918b91016121f5565b6040805180830381865afa15801561059d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c19190612252565b915091509550959350505050565b60ff8416600114806105e4575060ff84166002145b61062a5760405162461bcd60e51b81526020600482015260176024820152764f4350526f757465723a20696e76616c6964207479706560481b60448201526064016102ed565b61065c6040518060400160405280601081526020016f0119027a1a8291730b2323932b9b99d160851b81525030611459565b61069b6040518060400160405280601b81526020017f23204f4350522e6f6d6e694d696e74203d3e205f746f6b656e3a20000000000081525088611459565b6001600160a01b0387166106ec5760405162461bcd60e51b815260206004820152601860248201527713d0d4149bdd5d195c8e881d1bdad95b881a5b9d985b1a5960421b60448201526064016102ed565b6001600160a01b0385166107125760405162461bcd60e51b81526004016102ed906120b5565b600086116107325760405162461bcd60e51b81526004016102ed906120ec565b60025460405163bbe4f6db60e01b81526000916001600160a01b03169063bbe4f6db90610763908b906004016119ca565b602060405180830381865afa158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a49190612136565b90506001600160a01b03811661082a57600254604051634824fce960e11b81526001600160a01b0390911690639049f9d2906107e4908b906004016119ca565b6020604051808303816000875af1158015610803573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108279190612136565b90505b61083f6001600160a01b03891633838a6114a2565b610850888a89898989898934611276565b505050505050505050565b6108636114c9565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b61088d6114c9565b6108976000611523565b565b6001600160a01b0384166108bf5760405162461bcd60e51b81526004016102ed906120b5565b600085116108df5760405162461bcd60e51b81526004016102ed906120ec565b60408051608081018252600080825260208201819052918101829052606081019190915260035460405163d2ede8df60e01b81526001600160a01b03898116600483015261ffff8b1660248301529091169063d2ede8df90604401602060405180830381865afa158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b9190612136565b6001600160a01b03168082526109e75760405162461bcd60e51b815260206004820152602b60248201527f4f4350526f757465723a206e6f20737263546f6b656e206f6e2064657374696e60448201526a30ba34b7b71031b430b4b760a91b60648201526084016102ed565b336020820181905260408083018890526001600160a01b038781166060850152600354915163a22304ed60e01b81528a82166004820152602481018a90526044810193909352169063a22304ed90606401600060405180830381600087803b158015610a5257600080fd5b505af1158015610a66573d6000803e3d6000fd5b50506004805460405163b9cc4c7160e01b81526001600160a01b03909116935063b9cc4c7192503491610aa6918d918a9160039189918c918c9101612276565b6000604051808303818588803b158015610abf57600080fd5b505af1158015610ad3573d6000803e3d6000fd5b50505050505050505050505050565b6004546001600160a01b03163314610b0c5760405162461bcd60e51b81526004016102ed906122fa565b610b3e6040518060400160405280601081526020016f0119027a1a8291730b2323932b9b99d160851b81525030611459565b610b616040518060600160405280602f815260200161274e602f91398551611459565b610ba36040518060400160405280602081526020017f23204f4350522e6f6d6e694d696e7452656d6f7465203d3e205f747970653a208152508660ff16611573565b610bc9604051806060016040528060298152602001612725602991398560600151611459565b6003548451604051632783bf7560e11b81526001600160a01b03918216600482015261ffff8b1660248201526000929190911690634f077eea90604401602060405180830381865afa158015610c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c479190612136565b905060001960ff871601610d5c576001600160a01b038116610ce157600354604051630ef8524960e01b81526001600160a01b0390911690630ef8524990610c9790889088908e906004016123aa565b6020604051808303816000875af1158015610cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cda9190612136565b9050610dd3565b6003546040516301dbb1d760e21b81526001600160a01b039091169063076ec75c90610d139088908d906004016123e1565b6020604051808303816000875af1158015610d32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d569190612136565b50610dd3565b6003546040516301dbb1d760e21b81526001600160a01b039091169063076ec75c90610d8e9088908d906004016123e1565b6020604051808303816000875af1158015610dad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd19190612136565b505b81511561085057610dfb6040518060600160405280602a815260200161277d602a91396115b8565b84606001516001600160a01b031663cdaea7d7848b8b8b868b60400151896040518863ffffffff1660e01b8152600401610e3a96959493929190612407565b600060405180830381600088803b158015610e5457600080fd5b5087f1158015610e68573d6000803e3d6000fd5b5050505050505050505050505050565b6004546001600160a01b03163314610ea25760405162461bcd60e51b81526004016102ed906122fa565b6000610eb6846000015185604001516115fb565b9050610ee56040518060400160405280600b81526020016a011902fb0b6b7bab73a1d160ad1b81525082611573565b60055484516001600160a01b03908116911614610f6c5760025484516060860151604051636ce5768960e11b81526001600160a01b039093169263d9caed1292610f359290918690600401612453565b600060405180830381600087803b158015610f4f57600080fd5b505af1158015610f63573d6000803e3d6000fd5b505050506110dd565b600254600554604051636ce5768960e11b81526001600160a01b039283169263d9caed1292610fa49291169030908690600401612453565b600060405180830381600087803b158015610fbe57600080fd5b505af1158015610fd2573d6000803e3d6000fd5b5050600554604051632e1a7d4d60e01b8152600481018590526001600160a01b039091169250632e1a7d4d9150602401600060405180830381600087803b15801561101c57600080fd5b505af1158015611030573d6000803e3d6000fd5b50505050600084606001516001600160a01b03168260405160006040518083038185875af1925050503d8060008114611085576040519150601f19603f3d011682016040523d82523d6000602084013e61108a565b606091505b50509050806110db5760405162461bcd60e51b815260206004820152601f60248201527f4f4350526f757465723a206661696c656420746f2073656e642065746865720060448201526064016102ed565b505b61111360405180604001604052806013815260200172011902fb830bcb637b0b2173632b733ba341d1606d1b8152508351611573565b81511561118c576060840151845160405163cdaea7d760e01b81526001600160a01b039092169163cdaea7d7918691611158918c918c918c9189908b90600401612407565b600060405180830381600088803b15801561117257600080fd5b5087f1158015611186573d6000803e3d6000fd5b50505050505b50505050505050565b61119d6114c9565b6001600160a01b0381166112025760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ed565b61120b81611523565b50565b6040516001600160a01b03831660248201526044810182905261127190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526116a0565b505050565b6112ca6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160006001600160a01b0316815260200160608152602001606081525090565b6001600160a01b038a1681523360208201526112e68a89611775565b60408201526001600160a01b038716606082015260001960ff8716016113e057896001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015611344573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261136c9190810190612477565b8160800181905250896001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156113b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113da9190810190612477565b60a08201525b600480546040516382019ed560e01b81526001600160a01b03909116916382019ed591859161141b918e918b918d9189918d918d91016124e4565b6000604051808303818588803b15801561143457600080fd5b505af1158015611448573d6000803e3d6000fd5b505050505050505050505050505050565b61149e828260405160240161146f929190612541565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052611810565b5050565b6114c3846323b872dd60e01b85858560405160240161123a93929190612453565b50505050565b6000546001600160a01b031633146108975760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ed565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61149e828260405160240161158992919061256b565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052611810565b61120b816040516024016115cc919061258d565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052611810565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561163c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166091906125a0565b60ff16905080601203611676578291505061169a565b611681816012612169565b61168c90600a6126a1565b61169690846126ad565b9150505b92915050565b60006116f5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118199092919063ffffffff16565b905080516000148061171657508080602001905181019061171691906126cf565b6112715760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102ed565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117da91906125a0565b60ff169050806012036117f0578291505061169a565b6117fb816012612169565b61180690600a6126a1565b61169690846126f1565b61120b81611830565b60606118288484600085611851565b949350505050565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b6060824710156118b25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102ed565b600080866001600160a01b031685876040516118ce9190612708565b60006040518083038185875af1925050503d806000811461190b576040519150601f19603f3d011682016040523d82523d6000602084013e611910565b606091505b50915091506119218783838761192c565b979650505050505050565b6060831561199b578251600003611994576001600160a01b0385163b6119945760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102ed565b5081611828565b61182883838151156119b05781518083602001fd5b8060405162461bcd60e51b81526004016102ed919061258d565b6001600160a01b0391909116815260200190565b803561ffff811681146119f057600080fd5b919050565b6001600160a01b038116811461120b57600080fd5b80356119f0816119f5565b60ff8116811461120b57600080fd5b80356119f081611a15565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b0381118282101715611a6757611a67611a2f565b60405290565b604051608081016001600160401b0381118282101715611a6757611a67611a2f565b604051601f8201601f191681016001600160401b0381118282101715611ab757611ab7611a2f565b604052919050565b60006001600160401b03821115611ad857611ad8611a2f565b50601f01601f191660200190565b600082601f830112611af757600080fd5b8135611b0a611b0582611abf565b611a8f565b818152846020838601011115611b1f57600080fd5b816020850160208301376000918101602001919091529392505050565b600060608284031215611b4e57600080fd5b604051606081016001600160401b038282108183111715611b7157611b71611a2f565b8160405282935084358352602085013560208401526040850135915080821115611b9a57600080fd5b50611ba785828601611ae6565b6040830152505092915050565b600080600080600080600060e0888a031215611bcf57600080fd5b611bd8886119de565b9650602088013595506040880135611bef816119f5565b94506060880135611bff81611a15565b93506080880135611c0f816119f5565b925060a08801356001600160401b0380821115611c2b57600080fd5b611c378b838c01611ae6565b935060c08a0135915080821115611c4d57600080fd5b50611c5a8a828b01611b3c565b91505092959891949750929550565b600080600080600060808688031215611c8157600080fd5b611c8a866119de565b94506020860135611c9a81611a15565b935060408601356001600160401b0380821115611cb657600080fd5b818801915088601f830112611cca57600080fd5b813581811115611cd957600080fd5b896020828501011115611ceb57600080fd5b602083019550809450506060880135915080821115611d0957600080fd5b50611d1688828901611b3c565b9150509295509295909350565b600080600080600080600080610100898b031215611d4057600080fd5b611d49896119de565b97506020890135611d59816119f5565b9650604089013595506060890135611d70816119f5565b94506080890135611d8081611a15565b935060a0890135611d90816119f5565b925060c08901356001600160401b0380821115611dac57600080fd5b611db88c838d01611ae6565b935060e08b0135915080821115611dce57600080fd5b50611ddb8b828c01611b3c565b9150509295985092959890939650565b600060208284031215611dfd57600080fd5b8135611e08816119f5565b9392505050565b600080600080600080600060e0888a031215611e2a57600080fd5b611e33886119de565b96506020880135611e43816119f5565b9550604088013594506060880135611bff816119f5565b600060c08284031215611e6c57600080fd5b611e74611a45565b9050611e7f82611a0a565b8152611e8d60208301611a0a565b602082015260408201356040820152611ea860608301611a0a565b606082015260808201356001600160401b0380821115611ec757600080fd5b611ed385838601611ae6565b608084015260a0840135915080821115611eec57600080fd5b50611ef984828501611ae6565b60a08301525092915050565b600080600080600080600080610100898b031215611f2257600080fd5b611f2b896119de565b975060208901356001600160401b0380821115611f4757600080fd5b611f538c838d01611ae6565b985060408b01359750611f6860608c01611a24565b965060808b0135915080821115611f7e57600080fd5b611f8a8c838d01611e5a565b9550611f9860a08c01611a0a565b945060c08b0135935060e08b0135915080821115611fb557600080fd5b50611ddb8b828c01611ae6565b600080600080600080868803610120811215611fdd57600080fd5b611fe6886119de565b965060208801356001600160401b038082111561200257600080fd5b61200e8b838c01611ae6565b975060408a013596506080605f198401121561202957600080fd5b612031611a6d565b925060608a01359150612043826119f5565b908252608089013590612055826119f5565b81602084015260a08a0135604084015260c08a01359150612075826119f5565b81606084015282955060e08a013594506101008a013592508083111561209a57600080fd5b50506120a889828a01611ae6565b9150509295509295509295565b6020808252601b908201527f4f4350526f757465723a20726563656976657220696e76616c69640000000000604082015260600190565b6020808252602a908201527f4f4350526f757465723a20616d6f756e74496e206d75737420626520677265616040820152690746572207468616e20360b41b606082015260800190565b60006020828403121561214857600080fd5b8151611e08816119f5565b634e487b7160e01b600052601160045260246000fd5b8181038181111561169a5761169a612153565b60005b8381101561219757818101518382015260200161217f565b50506000910152565b600081518084526121b881602086016020860161217c565b601f01601f19169290920160200192915050565b8051825260208101516020830152600060408201516060604085015261169660608501826121a0565b61ffff8616815260ff8516602082015260806040820152826080820152828460a0830137600060a084830101526000601f19601f850116820160a083820301606084015261224660a08201856121cc565b98975050505050505050565b6000806040838503121561226557600080fd5b505080516020909101519092909150565b600061012061ffff8916835260018060a01b03808916602085015260ff88166040850152808751166060850152806020880151166080850152604087015160a08501528060608801511660c0850152508060e08401526122d8818401866121a0565b90508281036101008401526122ed81856121cc565b9998505050505050505050565b60208082526023908201527f4f4350526f757465723a2063616c6c6572206973206e6f74207468652062726960408201526264676560e81b606082015260800190565b600060018060a01b038083511684528060208401511660208501526040830151604085015280606084015116606085015250608082015160c0608085015261238860c08501826121a0565b905060a083015184820360a08601526123a182826121a0565b95945050505050565b6060815260006123bd606083018661233d565b6001600160a01b039490941660208301525061ffff91909116604090910152919050565b6040815260006123f4604083018561233d565b905061ffff831660208301529392505050565b61ffff8716815260c06020820152600061242460c08301886121a0565b604083018790526001600160a01b03861660608401526080830185905282810360a08401526122ed81856121a0565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561248957600080fd5b81516001600160401b0381111561249f57600080fd5b8201601f810184136124b057600080fd5b80516124be611b0582611abf565b8181528560208385010111156124d357600080fd5b6123a182602083016020860161217c565b61ffff871681526001600160a01b038616602082015260ff8516604082015260c06060820181905260009061251b9083018661233d565b828103608084015261252d81866121a0565b905082810360a08401526122ed81856121cc565b60408152600061255460408301856121a0565b905060018060a01b03831660208301529392505050565b60408152600061257e60408301856121a0565b90508260208301529392505050565b602081526000611e0860208301846121a0565b6000602082840312156125b257600080fd5b8151611e0881611a15565b600181815b808511156125f85781600019048211156125de576125de612153565b808516156125eb57918102915b93841c93908002906125c2565b509250929050565b60008261260f5750600161169a565b8161261c5750600061169a565b8160018114612632576002811461263c57612658565b600191505061169a565b60ff84111561264d5761264d612153565b50506001821b61169a565b5060208310610133831016604e8410600b841016171561267b575081810a61169a565b61268583836125bd565b806000190482111561269957612699612153565b029392505050565b6000611e088383612600565b6000826126ca57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156126e157600080fd5b81518015158114611e0857600080fd5b808202811582820484141761169a5761169a612153565b6000825161271a81846020870161217c565b919091019291505056fe23204f4350522e6f6d6e694d696e7452656d6f7465203d3e205f6d696e74506172616d732e746f3a2023204f4350522e6f6d6e694d696e7452656d6f7465203d3e205f6d696e74506172616d732e737263546f6b656e3a2023204f4350522e6f6d6e694d696e7452656d6f7465203d3e205f7061796c6f61642e6c656e6774683e30a264697066735822122063bc3316f5aa898c9f2ea707475b8496e22a10441d370984ec17ef0ec255a29b64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100c15760003560e01c8063715018a61161006f578063715018a6146101c0578063898f3a08146101d55780638da5cb5b146101e8578063e78cea9214610206578063eb8092dd14610226578063f1ff466b14610246578063f2fde38b1461026657600080fd5b80632a709b14146100cd5780633fc8cef3146101035780634219dc401461012357806345aece1e1461014357806350df239b146101585780636aadba541461018d5780636eb38212146101a057600080fd5b366100c857005b600080fd5b3480156100d957600080fd5b506003546100ed906001600160a01b031681565b6040516100fa91906119ca565b60405180910390f35b34801561010f57600080fd5b506005546100ed906001600160a01b031681565b34801561012f57600080fd5b506002546100ed906001600160a01b031681565b610156610151366004611bb4565b610286565b005b34801561016457600080fd5b50610178610173366004611c69565b610547565b604080519283526020830191909152016100fa565b61015661019b366004611d23565b6105cf565b3480156101ac57600080fd5b506101566101bb366004611deb565b61085b565b3480156101cc57600080fd5b50610156610885565b6101566101e3366004611e0f565b610899565b3480156101f457600080fd5b506000546001600160a01b03166100ed565b34801561021257600080fd5b506004546100ed906001600160a01b031681565b34801561023257600080fd5b50610156610241366004611f05565b610ae2565b34801561025257600080fd5b50610156610261366004611fc2565b610e78565b34801561027257600080fd5b50610156610281366004611deb565b611195565b8534116102f65760405162461bcd60e51b815260206004820152603360248201527f4f4350526f757465723a2073656e642076616c7565206d75737420626520677260448201527232b0ba32b9103a3430b71030b6b7bab73a24b760691b60648201526084015b60405180910390fd5b6005546001600160a01b031661034e5760405162461bcd60e51b815260206004820152601b60248201527f4f4350526f757465723a2077657468206e6f742073657420796574000000000060448201526064016102ed565b6001600160a01b0385166103745760405162461bcd60e51b81526004016102ed906120b5565b600086116103945760405162461bcd60e51b81526004016102ed906120ec565b600560009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0876040518263ffffffff1660e01b81526004016000604051808303818588803b1580156103e457600080fd5b505af11580156103f8573d6000803e3d6000fd5b505060025460055460405163bbe4f6db60e01b8152600095506001600160a01b03928316945063bbe4f6db935061043592909116906004016119ca565b602060405180830381865afa158015610452573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104769190612136565b90506001600160a01b03811661050057600254600554604051634824fce960e11b81526001600160a01b0392831692639049f9d2926104ba929116906004016119ca565b6020604051808303816000875af11580156104d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fd9190612136565b90505b600554610517906001600160a01b0316828961120e565b60055461053d906001600160a01b0316898989898989896105388634612169565b611276565b5050505050505050565b600480546040516350df239b60e01b815260009283926001600160a01b0316916350df239b91610581918b918b918b918b918b91016121f5565b6040805180830381865afa15801561059d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c19190612252565b915091509550959350505050565b60ff8416600114806105e4575060ff84166002145b61062a5760405162461bcd60e51b81526020600482015260176024820152764f4350526f757465723a20696e76616c6964207479706560481b60448201526064016102ed565b61065c6040518060400160405280601081526020016f0119027a1a8291730b2323932b9b99d160851b81525030611459565b61069b6040518060400160405280601b81526020017f23204f4350522e6f6d6e694d696e74203d3e205f746f6b656e3a20000000000081525088611459565b6001600160a01b0387166106ec5760405162461bcd60e51b815260206004820152601860248201527713d0d4149bdd5d195c8e881d1bdad95b881a5b9d985b1a5960421b60448201526064016102ed565b6001600160a01b0385166107125760405162461bcd60e51b81526004016102ed906120b5565b600086116107325760405162461bcd60e51b81526004016102ed906120ec565b60025460405163bbe4f6db60e01b81526000916001600160a01b03169063bbe4f6db90610763908b906004016119ca565b602060405180830381865afa158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a49190612136565b90506001600160a01b03811661082a57600254604051634824fce960e11b81526001600160a01b0390911690639049f9d2906107e4908b906004016119ca565b6020604051808303816000875af1158015610803573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108279190612136565b90505b61083f6001600160a01b03891633838a6114a2565b610850888a89898989898934611276565b505050505050505050565b6108636114c9565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b61088d6114c9565b6108976000611523565b565b6001600160a01b0384166108bf5760405162461bcd60e51b81526004016102ed906120b5565b600085116108df5760405162461bcd60e51b81526004016102ed906120ec565b60408051608081018252600080825260208201819052918101829052606081019190915260035460405163d2ede8df60e01b81526001600160a01b03898116600483015261ffff8b1660248301529091169063d2ede8df90604401602060405180830381865afa158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b9190612136565b6001600160a01b03168082526109e75760405162461bcd60e51b815260206004820152602b60248201527f4f4350526f757465723a206e6f20737263546f6b656e206f6e2064657374696e60448201526a30ba34b7b71031b430b4b760a91b60648201526084016102ed565b336020820181905260408083018890526001600160a01b038781166060850152600354915163a22304ed60e01b81528a82166004820152602481018a90526044810193909352169063a22304ed90606401600060405180830381600087803b158015610a5257600080fd5b505af1158015610a66573d6000803e3d6000fd5b50506004805460405163b9cc4c7160e01b81526001600160a01b03909116935063b9cc4c7192503491610aa6918d918a9160039189918c918c9101612276565b6000604051808303818588803b158015610abf57600080fd5b505af1158015610ad3573d6000803e3d6000fd5b50505050505050505050505050565b6004546001600160a01b03163314610b0c5760405162461bcd60e51b81526004016102ed906122fa565b610b3e6040518060400160405280601081526020016f0119027a1a8291730b2323932b9b99d160851b81525030611459565b610b616040518060600160405280602f815260200161274e602f91398551611459565b610ba36040518060400160405280602081526020017f23204f4350522e6f6d6e694d696e7452656d6f7465203d3e205f747970653a208152508660ff16611573565b610bc9604051806060016040528060298152602001612725602991398560600151611459565b6003548451604051632783bf7560e11b81526001600160a01b03918216600482015261ffff8b1660248201526000929190911690634f077eea90604401602060405180830381865afa158015610c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c479190612136565b905060001960ff871601610d5c576001600160a01b038116610ce157600354604051630ef8524960e01b81526001600160a01b0390911690630ef8524990610c9790889088908e906004016123aa565b6020604051808303816000875af1158015610cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cda9190612136565b9050610dd3565b6003546040516301dbb1d760e21b81526001600160a01b039091169063076ec75c90610d139088908d906004016123e1565b6020604051808303816000875af1158015610d32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d569190612136565b50610dd3565b6003546040516301dbb1d760e21b81526001600160a01b039091169063076ec75c90610d8e9088908d906004016123e1565b6020604051808303816000875af1158015610dad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd19190612136565b505b81511561085057610dfb6040518060600160405280602a815260200161277d602a91396115b8565b84606001516001600160a01b031663cdaea7d7848b8b8b868b60400151896040518863ffffffff1660e01b8152600401610e3a96959493929190612407565b600060405180830381600088803b158015610e5457600080fd5b5087f1158015610e68573d6000803e3d6000fd5b5050505050505050505050505050565b6004546001600160a01b03163314610ea25760405162461bcd60e51b81526004016102ed906122fa565b6000610eb6846000015185604001516115fb565b9050610ee56040518060400160405280600b81526020016a011902fb0b6b7bab73a1d160ad1b81525082611573565b60055484516001600160a01b03908116911614610f6c5760025484516060860151604051636ce5768960e11b81526001600160a01b039093169263d9caed1292610f359290918690600401612453565b600060405180830381600087803b158015610f4f57600080fd5b505af1158015610f63573d6000803e3d6000fd5b505050506110dd565b600254600554604051636ce5768960e11b81526001600160a01b039283169263d9caed1292610fa49291169030908690600401612453565b600060405180830381600087803b158015610fbe57600080fd5b505af1158015610fd2573d6000803e3d6000fd5b5050600554604051632e1a7d4d60e01b8152600481018590526001600160a01b039091169250632e1a7d4d9150602401600060405180830381600087803b15801561101c57600080fd5b505af1158015611030573d6000803e3d6000fd5b50505050600084606001516001600160a01b03168260405160006040518083038185875af1925050503d8060008114611085576040519150601f19603f3d011682016040523d82523d6000602084013e61108a565b606091505b50509050806110db5760405162461bcd60e51b815260206004820152601f60248201527f4f4350526f757465723a206661696c656420746f2073656e642065746865720060448201526064016102ed565b505b61111360405180604001604052806013815260200172011902fb830bcb637b0b2173632b733ba341d1606d1b8152508351611573565b81511561118c576060840151845160405163cdaea7d760e01b81526001600160a01b039092169163cdaea7d7918691611158918c918c918c9189908b90600401612407565b600060405180830381600088803b15801561117257600080fd5b5087f1158015611186573d6000803e3d6000fd5b50505050505b50505050505050565b61119d6114c9565b6001600160a01b0381166112025760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ed565b61120b81611523565b50565b6040516001600160a01b03831660248201526044810182905261127190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526116a0565b505050565b6112ca6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160006001600160a01b0316815260200160608152602001606081525090565b6001600160a01b038a1681523360208201526112e68a89611775565b60408201526001600160a01b038716606082015260001960ff8716016113e057896001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015611344573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261136c9190810190612477565b8160800181905250896001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156113b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113da9190810190612477565b60a08201525b600480546040516382019ed560e01b81526001600160a01b03909116916382019ed591859161141b918e918b918d9189918d918d91016124e4565b6000604051808303818588803b15801561143457600080fd5b505af1158015611448573d6000803e3d6000fd5b505050505050505050505050505050565b61149e828260405160240161146f929190612541565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052611810565b5050565b6114c3846323b872dd60e01b85858560405160240161123a93929190612453565b50505050565b6000546001600160a01b031633146108975760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ed565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61149e828260405160240161158992919061256b565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052611810565b61120b816040516024016115cc919061258d565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052611810565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561163c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166091906125a0565b60ff16905080601203611676578291505061169a565b611681816012612169565b61168c90600a6126a1565b61169690846126ad565b9150505b92915050565b60006116f5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118199092919063ffffffff16565b905080516000148061171657508080602001905181019061171691906126cf565b6112715760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102ed565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117da91906125a0565b60ff169050806012036117f0578291505061169a565b6117fb816012612169565b61180690600a6126a1565b61169690846126f1565b61120b81611830565b60606118288484600085611851565b949350505050565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b6060824710156118b25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102ed565b600080866001600160a01b031685876040516118ce9190612708565b60006040518083038185875af1925050503d806000811461190b576040519150601f19603f3d011682016040523d82523d6000602084013e611910565b606091505b50915091506119218783838761192c565b979650505050505050565b6060831561199b578251600003611994576001600160a01b0385163b6119945760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102ed565b5081611828565b61182883838151156119b05781518083602001fd5b8060405162461bcd60e51b81526004016102ed919061258d565b6001600160a01b0391909116815260200190565b803561ffff811681146119f057600080fd5b919050565b6001600160a01b038116811461120b57600080fd5b80356119f0816119f5565b60ff8116811461120b57600080fd5b80356119f081611a15565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b0381118282101715611a6757611a67611a2f565b60405290565b604051608081016001600160401b0381118282101715611a6757611a67611a2f565b604051601f8201601f191681016001600160401b0381118282101715611ab757611ab7611a2f565b604052919050565b60006001600160401b03821115611ad857611ad8611a2f565b50601f01601f191660200190565b600082601f830112611af757600080fd5b8135611b0a611b0582611abf565b611a8f565b818152846020838601011115611b1f57600080fd5b816020850160208301376000918101602001919091529392505050565b600060608284031215611b4e57600080fd5b604051606081016001600160401b038282108183111715611b7157611b71611a2f565b8160405282935084358352602085013560208401526040850135915080821115611b9a57600080fd5b50611ba785828601611ae6565b6040830152505092915050565b600080600080600080600060e0888a031215611bcf57600080fd5b611bd8886119de565b9650602088013595506040880135611bef816119f5565b94506060880135611bff81611a15565b93506080880135611c0f816119f5565b925060a08801356001600160401b0380821115611c2b57600080fd5b611c378b838c01611ae6565b935060c08a0135915080821115611c4d57600080fd5b50611c5a8a828b01611b3c565b91505092959891949750929550565b600080600080600060808688031215611c8157600080fd5b611c8a866119de565b94506020860135611c9a81611a15565b935060408601356001600160401b0380821115611cb657600080fd5b818801915088601f830112611cca57600080fd5b813581811115611cd957600080fd5b896020828501011115611ceb57600080fd5b602083019550809450506060880135915080821115611d0957600080fd5b50611d1688828901611b3c565b9150509295509295909350565b600080600080600080600080610100898b031215611d4057600080fd5b611d49896119de565b97506020890135611d59816119f5565b9650604089013595506060890135611d70816119f5565b94506080890135611d8081611a15565b935060a0890135611d90816119f5565b925060c08901356001600160401b0380821115611dac57600080fd5b611db88c838d01611ae6565b935060e08b0135915080821115611dce57600080fd5b50611ddb8b828c01611b3c565b9150509295985092959890939650565b600060208284031215611dfd57600080fd5b8135611e08816119f5565b9392505050565b600080600080600080600060e0888a031215611e2a57600080fd5b611e33886119de565b96506020880135611e43816119f5565b9550604088013594506060880135611bff816119f5565b600060c08284031215611e6c57600080fd5b611e74611a45565b9050611e7f82611a0a565b8152611e8d60208301611a0a565b602082015260408201356040820152611ea860608301611a0a565b606082015260808201356001600160401b0380821115611ec757600080fd5b611ed385838601611ae6565b608084015260a0840135915080821115611eec57600080fd5b50611ef984828501611ae6565b60a08301525092915050565b600080600080600080600080610100898b031215611f2257600080fd5b611f2b896119de565b975060208901356001600160401b0380821115611f4757600080fd5b611f538c838d01611ae6565b985060408b01359750611f6860608c01611a24565b965060808b0135915080821115611f7e57600080fd5b611f8a8c838d01611e5a565b9550611f9860a08c01611a0a565b945060c08b0135935060e08b0135915080821115611fb557600080fd5b50611ddb8b828c01611ae6565b600080600080600080868803610120811215611fdd57600080fd5b611fe6886119de565b965060208801356001600160401b038082111561200257600080fd5b61200e8b838c01611ae6565b975060408a013596506080605f198401121561202957600080fd5b612031611a6d565b925060608a01359150612043826119f5565b908252608089013590612055826119f5565b81602084015260a08a0135604084015260c08a01359150612075826119f5565b81606084015282955060e08a013594506101008a013592508083111561209a57600080fd5b50506120a889828a01611ae6565b9150509295509295509295565b6020808252601b908201527f4f4350526f757465723a20726563656976657220696e76616c69640000000000604082015260600190565b6020808252602a908201527f4f4350526f757465723a20616d6f756e74496e206d75737420626520677265616040820152690746572207468616e20360b41b606082015260800190565b60006020828403121561214857600080fd5b8151611e08816119f5565b634e487b7160e01b600052601160045260246000fd5b8181038181111561169a5761169a612153565b60005b8381101561219757818101518382015260200161217f565b50506000910152565b600081518084526121b881602086016020860161217c565b601f01601f19169290920160200192915050565b8051825260208101516020830152600060408201516060604085015261169660608501826121a0565b61ffff8616815260ff8516602082015260806040820152826080820152828460a0830137600060a084830101526000601f19601f850116820160a083820301606084015261224660a08201856121cc565b98975050505050505050565b6000806040838503121561226557600080fd5b505080516020909101519092909150565b600061012061ffff8916835260018060a01b03808916602085015260ff88166040850152808751166060850152806020880151166080850152604087015160a08501528060608801511660c0850152508060e08401526122d8818401866121a0565b90508281036101008401526122ed81856121cc565b9998505050505050505050565b60208082526023908201527f4f4350526f757465723a2063616c6c6572206973206e6f74207468652062726960408201526264676560e81b606082015260800190565b600060018060a01b038083511684528060208401511660208501526040830151604085015280606084015116606085015250608082015160c0608085015261238860c08501826121a0565b905060a083015184820360a08601526123a182826121a0565b95945050505050565b6060815260006123bd606083018661233d565b6001600160a01b039490941660208301525061ffff91909116604090910152919050565b6040815260006123f4604083018561233d565b905061ffff831660208301529392505050565b61ffff8716815260c06020820152600061242460c08301886121a0565b604083018790526001600160a01b03861660608401526080830185905282810360a08401526122ed81856121a0565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561248957600080fd5b81516001600160401b0381111561249f57600080fd5b8201601f810184136124b057600080fd5b80516124be611b0582611abf565b8181528560208385010111156124d357600080fd5b6123a182602083016020860161217c565b61ffff871681526001600160a01b038616602082015260ff8516604082015260c06060820181905260009061251b9083018661233d565b828103608084015261252d81866121a0565b905082810360a08401526122ed81856121cc565b60408152600061255460408301856121a0565b905060018060a01b03831660208301529392505050565b60408152600061257e60408301856121a0565b90508260208301529392505050565b602081526000611e0860208301846121a0565b6000602082840312156125b257600080fd5b8151611e0881611a15565b600181815b808511156125f85781600019048211156125de576125de612153565b808516156125eb57918102915b93841c93908002906125c2565b509250929050565b60008261260f5750600161169a565b8161261c5750600061169a565b8160018114612632576002811461263c57612658565b600191505061169a565b60ff84111561264d5761264d612153565b50506001821b61169a565b5060208310610133831016604e8410600b841016171561267b575081810a61169a565b61268583836125bd565b806000190482111561269957612699612153565b029392505050565b6000611e088383612600565b6000826126ca57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156126e157600080fd5b81518015158114611e0857600080fd5b808202811582820484141761169a5761169a612153565b6000825161271a81846020870161217c565b919091019291505056fe23204f4350522e6f6d6e694d696e7452656d6f7465203d3e205f6d696e74506172616d732e746f3a2023204f4350522e6f6d6e694d696e7452656d6f7465203d3e205f6d696e74506172616d732e737263546f6b656e3a2023204f4350522e6f6d6e694d696e7452656d6f7465203d3e205f7061796c6f61642e6c656e6774683e30a264697066735822122063bc3316f5aa898c9f2ea707475b8496e22a10441d370984ec17ef0ec255a29b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Initializes the contract setting the deployer as the initial owner.",
        "params": {
          "_bridge": "The address of the bridge contract.",
          "_poolFactory": "The address of the pool factory contract.",
          "_tokenManager": "The address of the token manager contract.",
          "_weth": "The address of the WETH contract."
        }
      },
      "omniMint(uint16,address,uint256,address,uint8,address,bytes,(uint256,uint256,bytes))": {
        "details": "Transfers tokens from sender to receiver on the same chain. If the `getPool` is not deployed, it will be deployed. If the `getPool` is deployed, it will be used. `_token` cannot be the zero address and it will be transferred from sender to receiver. `_omniMint` will be called to mint the token on the receiver chain. Requirements: - `_token` cannot be the zero address. - `_to` cannot be the zero address. - `_amountIn` must be greater than 0.",
        "params": {
          "_amountIn": "The amount of tokens to transfer.",
          "_lzTxParams": "The layer zero transaction parameters.",
          "_payload": "The payload to send to the receiver.",
          "_refundAddress": "The address to refund the fee to.",
          "_remoteChainId": "The chain id of the receiver.",
          "_to": "The address of the receiver.",
          "_token": "The address of the token to transfer.",
          "_type": "The type of the transaction."
        }
      },
      "omniMintRemote(uint16,bytes,uint256,uint8,(address,address,uint256,address,string,string),address,uint256,bytes)": {
        "details": "Transfers tokens from sender to receiver on the same chain. Requirements: - `_token` cannot be the zero address. - `_to` cannot be the zero address. - `_amountIn` must be greater than 0. - only the bridge can call this function.",
        "params": {
          "_dstGasForCall": "The gas for the call.",
          "_lzEndpoint": "The layer zero endpoint.",
          "_mintParams": "The mint parameters.",
          "_nonce": "The nonce of the transaction.",
          "_payload": "The payload to send to the receiver.",
          "_srcAddress": "The address of the sender.",
          "_srcChainId": "The chain id of the sender.",
          "_type": "The type of the transaction."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "quoteLayerZeroFee(uint16,uint8,bytes,(uint256,uint256,bytes))": {
        "details": "Transfers tokens from sender to receiver on the same chain. Invoke the `bridge` to get quote for the fee and amount of token on the other chain.",
        "params": {
          "_lzTxParams": "The layer zero transaction parameters.",
          "_remoteChainId": "The chain id of the receiver.",
          "_type": "The type of the transaction.",
          "_userPayload": "The payload to send to the receiver."
        },
        "returns": {
          "_0": "The amount of token on the other chain and the fee to send to the bridge."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateBridge(address)": {
        "details": "update the bridge address. Requirements: - only the owner can call this function.",
        "params": {
          "_bridge": "The address of the bridge contract."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1424,
        "contract": "contracts/OCPRouter.sol:OCPRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1540,
        "contract": "contracts/OCPRouter.sol:OCPRouter",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3382,
        "contract": "contracts/OCPRouter.sol:OCPRouter",
        "label": "poolFactory",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IOCPoolFactory)4484"
      },
      {
        "astId": 3385,
        "contract": "contracts/OCPRouter.sol:OCPRouter",
        "label": "tokenManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IOCPOmniTokenManager)4343"
      },
      {
        "astId": 3388,
        "contract": "contracts/OCPRouter.sol:OCPRouter",
        "label": "bridge",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IOCPBridge)4290"
      },
      {
        "astId": 3390,
        "contract": "contracts/OCPRouter.sol:OCPRouter",
        "label": "weth",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IOCPBridge)4290": {
        "encoding": "inplace",
        "label": "contract IOCPBridge",
        "numberOfBytes": "20"
      },
      "t_contract(IOCPOmniTokenManager)4343": {
        "encoding": "inplace",
        "label": "contract IOCPOmniTokenManager",
        "numberOfBytes": "20"
      },
      "t_contract(IOCPoolFactory)4484": {
        "encoding": "inplace",
        "label": "contract IOCPoolFactory",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}