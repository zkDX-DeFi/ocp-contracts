{
  "address": "0xA18Eabbb0BB16F5582e878c1Fc0ead05CdbdBbfe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x79be2711b22a548c1a2199be0a7608570a937546545fe56c0af16277351757f2",
  "receipt": {
    "to": null,
    "from": "0xafc183BE937367B219F9283916d352f2C03ff512",
    "contractAddress": "0xA18Eabbb0BB16F5582e878c1Fc0ead05CdbdBbfe",
    "transactionIndex": 1,
    "gasUsed": "264794",
    "logsBloom": "0x
    "blockHash": "0x02f0244cf89636c731ae0f26eea95899e131a1d14c33e19eb8c6b7edf673f0e3",
    "transactionHash": "0x79be2711b22a548c1a2199be0a7608570a937546545fe56c0af16277351757f2",
    "logs": [],
    "blockNumber": 10822134,
    "cumulativeGasUsed": "311647",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3237f7a1bc1f3f789205197efd1ef264",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createPool(address)\":{\"details\":\"create a new pool `createPool` is a helper function to create a new pool. Emits a {PoolCreated} event. If the pool already exists, it will revert. If the pool is created successfully, it will return the pool address and be added to `getPool`. Requirements: - _token must be valid - `getPool[_token]` must be empty\",\"params\":{\"_token\":\"token address\"},\"returns\":{\"pool\":\"address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OCPoolFactory.sol\":\"OCPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/OCPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\nimport \\\"./interfaces/IOCPoolFactory.sol\\\";\\nimport \\\"./entity/OCPool.sol\\\";\\ncontract OCPoolFactory is IOCPoolFactory {\\n    mapping(address => address) public override getPool; // srcToken -> pool\\n\\n    /**\\n        * @dev create a new pool\\n\\n        * `createPool` is a helper function to create a new pool.\\n\\n        * Emits a {PoolCreated} event.\\n\\n        * If the pool already exists, it will revert.\\n\\n        * If the pool is created successfully, it will return the pool address and be added to `getPool`.\\n\\n        * Requirements:\\n\\n            * - _token must be valid\\n\\n            * - `getPool[_token]` must be empty\\n\\n        * @param _token token address\\n        * @return pool address\\n    */\\n    function createPool(address _token) external override returns (address pool){\\n        require(address(getPool[_token]) == address(0x0), \\\"OCPPoolFactory: Pool already exists\\\");\\n\\n        OCPool newPool = new OCPool{salt: keccak256(abi.encodePacked(\\\"OCP_CREATE_POOL\\\", _token))}(\\n            _token\\n        );\\n        pool = address(newPool);\\n        getPool[_token] = pool;\\n    }\\n}\\n\",\"keccak256\":\"0x98ef4dcc8f97f312d441404574447d79c419d409cd58a927c8dce3c08f231f17\",\"license\":\"MIT\"},\"contracts/entity/OCPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\ncontract OCPool {\\n    IERC20 public token;\\n    address public router;\\n    /**\\n        * @dev Initializes the contract setting the deployer as the initial owner.\\n\\n        * @param _token The address of the token contract.\\n    */\\n    constructor (address _token) {\\n        token = IERC20(_token);\\n    }\\n\\n    /**\\n        * @dev Transfers tokens from sender to receiver on the same chain.\\n\\n        * @param _receiver The address of the receiver.\\n        * @param _amount The amount of tokens to transfer.\\n    */\\n    function withdraw(address _receiver, uint256 _amount) external {\\n\\n    }\\n}\\n\",\"keccak256\":\"0x67118943881cb3b0db04c89a6406000a60ab7743ed6d3ba59a5f062f355eec84\",\"license\":\"MIT\"},\"contracts/interfaces/IOCPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\nimport \\\"../libraries/Structs.sol\\\";\\ninterface IOCPoolFactory {\\n    function getPool(address _token) external view returns (address pool);\\n    function createPool(address _token) external returns (address pool);\\n}\\n\",\"keccak256\":\"0x128b596eac7c3e5453a8e4aa11b5121e3fbb4196f76db7645687d545e18c028b\",\"license\":\"MIT\"},\"contracts/libraries/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary Structs {\\n\\n    struct LzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    struct MintObj {\\n        address srcToken;\\n        uint256 amount;\\n        address to;\\n        string name;\\n        string symbol;\\n    }\\n\\n    struct RedeemObj {\\n        address srcToken;\\n        uint16 dstChainId;\\n        uint256 amount;\\n        address to;\\n    }\\n\\n    struct CachedMint {\\n        address token;\\n        uint256 amount;\\n        address to;\\n        bytes payload;\\n    }\\n}\\n\",\"keccak256\":\"0xedd9de0bae1bbb43a7e7fca674b89c387ebc94a53403c65f56924b69a6ba0a4c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506103d4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80639049f9d21461003b578063bbe4f6db1461006a575b600080fd5b61004e6100493660046101de565b610093565b6040516001600160a01b03909116815260200160405180910390f35b61004e6100783660046101de565b6000602081905290815260409020546001600160a01b031681565b6001600160a01b038181166000908152602081905260408120549091161561010d5760405162461bcd60e51b815260206004820152602360248201527f4f4350506f6f6c466163746f72793a20506f6f6c20616c72656164792065786960448201526273747360e81b606482015260840160405180910390fd5b6040516e13d0d417d0d49150551157d413d3d3608a1b60208201526bffffffffffffffffffffffff19606084901b16602f820152600090604301604051602081830303815290604052805190602001208360405161016a906101d1565b6001600160a01b0390911681526020018190604051809103906000f590508015801561019a573d6000803e3d6000fd5b506001600160a01b03938416600090815260208190526040902080546001600160a01b031916948216949094179093555090919050565b6101908061020f83390190565b6000602082840312156101f057600080fd5b81356001600160a01b038116811461020757600080fd5b939250505056fe608060405234801561001057600080fd5b5060405161019038038061019083398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b60fe806100926000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c8063f3fef3a3146041578063f887ea40146052578063fc0c546a146080575b600080fd5b6050604c3660046092565b5050565b005b6001546064906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6000546064906001600160a01b031681565b6000806040838503121560a457600080fd5b82356001600160a01b038116811460ba57600080fd5b94602093909301359350505056fea26469706673582212205b7c6dd8c94db0cfb98555310c434fb1171f7ecba88eada1f09f6e55f5e5fb7164736f6c63430008110033a2646970667358221220b6a037e4f4b00eeb094b6a849c2690cc4620bc6181d4325370edc1b90b091c8b64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80639049f9d21461003b578063bbe4f6db1461006a575b600080fd5b61004e6100493660046101de565b610093565b6040516001600160a01b03909116815260200160405180910390f35b61004e6100783660046101de565b6000602081905290815260409020546001600160a01b031681565b6001600160a01b038181166000908152602081905260408120549091161561010d5760405162461bcd60e51b815260206004820152602360248201527f4f4350506f6f6c466163746f72793a20506f6f6c20616c72656164792065786960448201526273747360e81b606482015260840160405180910390fd5b6040516e13d0d417d0d49150551157d413d3d3608a1b60208201526bffffffffffffffffffffffff19606084901b16602f820152600090604301604051602081830303815290604052805190602001208360405161016a906101d1565b6001600160a01b0390911681526020018190604051809103906000f590508015801561019a573d6000803e3d6000fd5b506001600160a01b03938416600090815260208190526040902080546001600160a01b031916948216949094179093555090919050565b6101908061020f83390190565b6000602082840312156101f057600080fd5b81356001600160a01b038116811461020757600080fd5b939250505056fe608060405234801561001057600080fd5b5060405161019038038061019083398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b60fe806100926000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c8063f3fef3a3146041578063f887ea40146052578063fc0c546a146080575b600080fd5b6050604c3660046092565b5050565b005b6001546064906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6000546064906001600160a01b031681565b6000806040838503121560a457600080fd5b82356001600160a01b038116811460ba57600080fd5b94602093909301359350505056fea26469706673582212205b7c6dd8c94db0cfb98555310c434fb1171f7ecba88eada1f09f6e55f5e5fb7164736f6c63430008110033a2646970667358221220b6a037e4f4b00eeb094b6a849c2690cc4620bc6181d4325370edc1b90b091c8b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createPool(address)": {
        "details": "create a new pool `createPool` is a helper function to create a new pool. Emits a {PoolCreated} event. If the pool already exists, it will revert. If the pool is created successfully, it will return the pool address and be added to `getPool`. Requirements: - _token must be valid - `getPool[_token]` must be empty",
        "params": {
          "_token": "token address"
        },
        "returns": {
          "pool": "address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6425,
        "contract": "contracts/OCPoolFactory.sol:OCPoolFactory",
        "label": "getPool",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}