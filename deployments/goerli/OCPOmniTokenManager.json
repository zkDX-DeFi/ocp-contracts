{
  "address": "0xE5FEA9A2286bb3A93D746A4653D583760f806B12",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "srcToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_omniTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "address[]",
          "name": "_srcTokens",
          "type": "address[]"
        }
      ],
      "name": "approveSourceTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "srcToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct Structs.MintObj",
          "name": "_mintParams",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_lzEndpoint",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        }
      ],
      "name": "createOmniToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_omniToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        }
      ],
      "name": "omniBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_srcToken",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "omniMint",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "omniTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_srcTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint16[]",
          "name": "_srcChainIds",
          "type": "uint16[]"
        },
        {
          "internalType": "address",
          "name": "_omniToken",
          "type": "address"
        }
      ],
      "name": "requestAddSourceTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "sourceTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeLock",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "updateRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_timeLock",
          "type": "address"
        }
      ],
      "name": "updateTimeLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3693083283bb619ebb7e8eaa34d160788df4e35f6b257ec26b11ae73b607b361",
  "receipt": {
    "to": null,
    "from": "0xafc183BE937367B219F9283916d352f2C03ff512",
    "contractAddress": "0xE5FEA9A2286bb3A93D746A4653D583760f806B12",
    "transactionIndex": 24,
    "gasUsed": "4013150",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x115893fd17a6842c95bd04f5f94321d113bc80412a0498d856f9da5ca1853983",
    "transactionHash": "0x3693083283bb619ebb7e8eaa34d160788df4e35f6b257ec26b11ae73b607b361",
    "logs": [],
    "blockNumber": 9828590,
    "cumulativeGasUsed": "8157218",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "36b0db6fb45f8edf47de0c113adff233",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_omniTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"address[]\",\"name\":\"_srcTokens\",\"type\":\"address[]\"}],\"name\":\"approveSourceTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct Structs.MintObj\",\"name\":\"_mintParams\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"}],\"name\":\"createOmniToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_omniToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"omniBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"omniMint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"omniTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_srcTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_srcChainIds\",\"type\":\"uint16[]\"},{\"internalType\":\"address\",\"name\":\"_omniToken\",\"type\":\"address\"}],\"name\":\"requestAddSourceTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"sourceTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timeLock\",\"type\":\"address\"}],\"name\":\"updateTimeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Muller\",\"details\":\"This contract is used to manage the OmniTokensIt is used by the router to create OmniTokens and mint/burn tokens\",\"kind\":\"dev\",\"methods\":{\"createOmniToken((address,uint256,address,string,string),address,uint16)\":{\"details\":\"Create a new OmniToken Requirements: `_mintParams.srcToken` cannot be the zero address `_mintParams.srcChainId` cannot be the zero address `_mintParams.name` cannot be the zero address `_mintParams.symbol` cannot be the zero address `_mintParams.amount` cannot be the zero address `_mintParams.to` cannot be the zero address `_lzEndpoint` cannot be the zero address `_srcChainId` cannot be the zero address\",\"params\":{\"_lzEndpoint\":\"The endpoint of the Lazynode\",\"_mintParams\":\"The mint parameters\",\"_srcChainId\":\"The source chain id\"},\"returns\":{\"token\":\"The address of the new OmniToken\"}}},\"title\":\"OCPOmniTokenManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OCPOmniTokenManager.sol\":\"OCPOmniTokenManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xe9617a9f6db351b6ac4c9d5b1097798af59ad7f813e370e8cf69bb44addd8548\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0x909bf72002c91806f39a64172c12b4188219e8649deefbe8d862604d4f9d3faf\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xe3e50134e39aa3c0f916447d36367970c6e4df972d488b794227e0b052ce80d5\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"../interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"../util/BytesLib.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    using BytesLib for bytes;\\n\\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\\n    uint constant public DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\\n\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\\n    address public precrime;\\n\\n    event SetPrecrime(address precrime);\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        _checkPayloadSize(_dstChainId, _payload.length);\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\\n        if (payloadSizeLimit == 0) { // use default if not set\\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\\n        }\\n        require(_payloadSize <= payloadSizeLimit, \\\"LzApp: payload size is too large\\\");\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\n    // this function set the trusted path for the cross-chain communication\\n    function setTrustedRemote(uint16 _remoteChainId, bytes calldata _path) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = _path;\\n        emit SetTrustedRemote(_remoteChainId, _path);\\n    }\\n\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\n    }\\n\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\n    }\\n\\n    function setPrecrime(address _precrime) external onlyOwner {\\n        precrime = _precrime;\\n        emit SetPrecrime(_precrime);\\n    }\\n\\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\\n        require(_minGas > 0, \\\"LzApp: invalid minGas\\\");\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    // if the size is 0, it means default size limit\\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\\n        payloadSizeLimitLookup[_dstChainId] = _size;\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xdcf824e4bd747296fa38dbce9f8250514ce24e53cff79909a785e0923274de4a\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LzApp.sol\\\";\\nimport \\\"../util/ExcessivelySafeCall.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzApp is LzApp {\\n    using ExcessivelySafeCall for address;\\n\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\\n        // try-catch all errors/exceptions\\n        if (!success) {\\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\\n        }\\n    }\\n\\n    function _storeFailedMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload, bytes memory _reason) internal virtual {\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\\n    }\\n\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\\n        // only internal transaction\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\n    }\\n}\\n\",\"keccak256\":\"0x2afd4980a5850f45f2c4d7ec44d77b292a51b80f847566479548f89572065311\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/IOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IOFTCore.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the OFT standard\\n */\\ninterface IOFT is IOFTCore, IERC20 {\\n\\n}\\n\",\"keccak256\":\"0x102ab1f2484ffa58d3b913e469529e10a4843c655c529c9614468d1e9cf0ff8c\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/IOFTCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTCore is IERC165 {\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n}\\n\",\"keccak256\":\"0xc19c158682e42cad701a6c1f70011b039a2f928b3b491377af981bd5ffebbab8\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/OFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./IOFT.sol\\\";\\nimport \\\"./OFTCore.sol\\\";\\n\\n// override decimal() function is needed\\ncontract OFT is OFTCore, ERC20, IOFT {\\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) ERC20(_name, _symbol) OFTCore(_lzEndpoint) {}\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OFTCore, IERC165) returns (bool) {\\n        return interfaceId == type(IOFT).interfaceId || interfaceId == type(IERC20).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function token() public view virtual override returns (address) {\\n        return address(this);\\n    }\\n\\n    function circulatingSupply() public view virtual override returns (uint) {\\n        return totalSupply();\\n    }\\n\\n    function _debitFrom(address _from, uint16, bytes memory, uint _amount) internal virtual override returns(uint) {\\n        address spender = _msgSender();\\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\\n        _burn(_from, _amount);\\n        return _amount;\\n    }\\n\\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override returns(uint) {\\n        _mint(_toAddress, _amount);\\n        return _amount;\\n    }\\n}\\n\",\"keccak256\":\"0xeac979059b14a25f459e7fb7b69cdeea3171d41a996b4f61e5e91105c6be9f5b\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/OFTCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../lzApp/NonblockingLzApp.sol\\\";\\nimport \\\"./IOFTCore.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract OFTCore is NonblockingLzApp, ERC165, IOFTCore {\\n    using BytesLib for bytes;\\n\\n    uint public constant NO_EXTRA_GAS = 0;\\n\\n    // packet type\\n    uint16 public constant PT_SEND = 0;\\n\\n    bool public useCustomAdapterParams;\\n\\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IOFTCore).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\\n        // mock the payload for sendFrom()\\n        bytes memory payload = abi.encode(PT_SEND, _toAddress, _amount);\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n    }\\n\\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) public payable virtual override {\\n        _send(_from, _dstChainId, _toAddress, _amount, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams) public virtual onlyOwner {\\n        useCustomAdapterParams = _useCustomAdapterParams;\\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\\n    }\\n\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        uint16 packetType;\\n        assembly {\\n            packetType := mload(add(_payload, 32))\\n        }\\n\\n        if (packetType == PT_SEND) {\\n            _sendAck(_srcChainId, _srcAddress, _nonce, _payload);\\n        } else {\\n            revert(\\\"OFTCore: unknown packet type\\\");\\n        }\\n    }\\n\\n    function _send(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\\n        _checkAdapterParams(_dstChainId, PT_SEND, _adapterParams, NO_EXTRA_GAS);\\n\\n        uint amount = _debitFrom(_from, _dstChainId, _toAddress, _amount);\\n\\n        bytes memory lzPayload = abi.encode(PT_SEND, _toAddress, amount);\\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\\n\\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\\n    }\\n\\n    function _sendAck(uint16 _srcChainId, bytes memory, uint64, bytes memory _payload) internal virtual {\\n        (, bytes memory toAddressBytes, uint amount) = abi.decode(_payload, (uint16, bytes, uint));\\n\\n        address to = toAddressBytes.toAddress(0);\\n\\n        amount = _creditTo(_srcChainId, to, amount);\\n        emit ReceiveFromChain(_srcChainId, to, amount);\\n    }\\n\\n    function _checkAdapterParams(uint16 _dstChainId, uint16 _pkType, bytes memory _adapterParams, uint _extraGas) internal virtual {\\n        if (useCustomAdapterParams) {\\n            _checkGasLimit(_dstChainId, _pkType, _adapterParams, _extraGas);\\n        } else {\\n            require(_adapterParams.length == 0, \\\"OFTCore: _adapterParams must be empty.\\\");\\n        }\\n    }\\n\\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount) internal virtual returns(uint);\\n\\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _amount) internal virtual returns(uint);\\n}\\n\",\"keccak256\":\"0xebccf36b3dfb8f1040782a4d32db8fbe82b7a0a355587af3e1386123abdf2c20\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/util/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n        // Get a location of some free memory and store it in tempBytes as\\n        // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n        // Store the length of the first bytes array at the beginning of\\n        // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n        // Maintain a memory counter for the current write location in the\\n        // temp bytes array by adding the 32 bytes for the array length to\\n        // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n        // Stop copying when the memory counter reaches the length of the\\n        // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n            // Initialize a copy counter to the start of the _preBytes data,\\n            // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n            // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n            // Write the _preBytes data into the tempBytes memory 32 bytes\\n            // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Add the length of _postBytes to the current length of tempBytes\\n        // and store it as the new length in the first 32 bytes of the\\n        // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n        // Move the memory counter back from a multiple of 0x20 to the\\n        // actual end of the _preBytes data.\\n            mc := end\\n        // Stop copying when the memory counter reaches the new combined\\n        // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Update the free-memory pointer by padding our last write location\\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n        // next 32 byte block, then round down to the nearest multiple of\\n        // 32. If the sum of the length of the two arrays is zero then add\\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n            not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n        // Read the first 32 bytes of _preBytes storage, which is the length\\n        // of the array. (We don't need to use the offset into the slot\\n        // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n        // Arrays of 31 bytes or less have an even value in their slot,\\n        // while longer arrays have an odd value. The actual length is\\n        // the slot divided by two for odd values, and the lowest order\\n        // byte divided by two for even values.\\n        // If the slot is even, bitwise and the slot with 255 and divide by\\n        // two to get the length. If the slot is odd, bitwise and the slot\\n        // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n        // slength can contain both the length and contents of the array\\n        // if length < 32 bytes so let's prepare for that\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n            // Since the new array still fits in the slot, we just need to\\n            // update the contents of the slot.\\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                _preBytes.slot,\\n                // all the modifications to the slot are inside this\\n                // next block\\n                add(\\n                // we can just add to the slot contents because the\\n                // bytes we want to change are the LSBs\\n                fslot,\\n                add(\\n                mul(\\n                div(\\n                // load the bytes from memory\\n                mload(add(_postBytes, 0x20)),\\n                // zero all bytes to the right\\n                exp(0x100, sub(32, mlength))\\n                ),\\n                // and now shift left the number of bytes to\\n                // leave space for the length in the slot\\n                exp(0x100, sub(32, newlength))\\n                ),\\n                // increase length by the double of the memory\\n                // bytes length\\n                mul(mlength, 2)\\n                )\\n                )\\n                )\\n            }\\n            case 1 {\\n            // The stored value fits in the slot, but the combined value\\n            // will exceed it.\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // The contents of the _postBytes array start 32 bytes into\\n            // the structure. Our first read should obtain the `submod`\\n            // bytes that can fit into the unused space in the last word\\n            // of the stored array. To get this, we read 32 bytes starting\\n            // from `submod`, so the data we read overlaps with the array\\n            // contents by `submod` bytes. Masking the lowest-order\\n            // `submod` bytes allows us to add that value directly to the\\n            // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                sc,\\n                add(\\n                and(\\n                fslot,\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                ),\\n                and(mload(mc), mask)\\n                )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n            // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // Copy over the first `submod` bytes of the new data as in\\n            // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n            // The first word of the slice result is potentially a partial\\n            // word read from the original array. To read it, we calculate\\n            // the length of that partial word and start copying that many\\n            // bytes into the array. The first word we copy will start with\\n            // data we don't care about, but the last `lengthmod` bytes will\\n            // land at the beginning of the contents of the new array. When\\n            // we're done copying, we overwrite the full first word with\\n            // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n            // The multiplication in the next line is necessary\\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\\n            // the following copy loop was copying the origin's length\\n            // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                // The multiplication in the next line has the same exact purpose\\n                // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n            //update free-memory pointer\\n            //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n            //zero out the 32 bytes slice we are about to return\\n            //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n            // cb is a circuit breaker in the for loop since there's\\n            //  no said feature for inline assembly loops\\n            // cb = 1 - don't breaker\\n            // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                    // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    view\\n    returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n        // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n        // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                    // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                        // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                    // cb is a circuit breaker in the for loop since there's\\n                    //  no said feature for inline assembly loops\\n                    // cb = 1 - don't breaker\\n                    // cb = 0 - break\\n                        let cb := 1\\n\\n                    // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                            // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x2255aadad70e87ed42b158776330175644b07fbbc7e77ed32cd6330974abbcee\",\"license\":\"Unlicense\"},\"@layerzerolabs/solidity-examples/contracts/util/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint256 constant LOW_28_MASK =\\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n            _gas, // gas\\n            _target, // recipient\\n            0, // ether value\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n            _gas, // gas\\n            _target, // recipient\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\\n    internal\\n    pure\\n    {\\n        require(_buf.length >= 4);\\n        uint256 _mask = LOW_28_MASK;\\n        assembly {\\n        // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n        // mask out the top 4 bytes\\n        // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23942250ddd277c443fa27c6b4ab51e6b3b5e654548b6b9e8d785a88ebec4dfe\",\"license\":\"MIT OR Apache-2.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/OCPOmniTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\nimport \\\"./interfaces/IOCPOmniTokenManager.sol\\\";\\nimport \\\"./libraries/Structs.sol\\\";\\nimport \\\"./entity/OmniToken.sol\\\";\\n\\n/**\\n    @title OCPOmniTokenManager\\n    @author Muller\\n    @dev This contract is used to manage the OmniTokens\\n    @dev It is used by the router to create OmniTokens and mint/burn tokens\\n\\n\\n*/\\n\\ncontract OCPOmniTokenManager is IOCPOmniTokenManager {\\n    address public router;\\n    address public timeLock;\\n    constructor () {\\n        timeLock = msg.sender;\\n    }\\n    mapping(address => mapping(uint16 => address)) public omniTokens; // srcToken -> srcChainId -> omniToken\\n    mapping(address => mapping(uint16 => address)) public sourceTokens; // omniToken -> srcChainId -> srcToken\\n    event TokenCreated(address indexed srcToken, uint16 indexed srcChainId, address indexed token);\\n    modifier onlyRouter() {\\n        require(msg.sender == router, \\\"OCPTokenManager: caller is not the router\\\");\\n        _;\\n    }\\n\\n    modifier onlyTimeLock() {\\n        require(msg.sender == timeLock, \\\"OCPTokenManager: caller is not the timelock\\\");\\n        _;\\n    }\\n\\n    /**\\n        * @dev Create a new OmniToken\\n\\n        * Requirements:\\n\\n            * `_mintParams.srcToken` cannot be the zero address\\n\\n            * `_mintParams.srcChainId` cannot be the zero address\\n\\n            * `_mintParams.name` cannot be the zero address\\n\\n            * `_mintParams.symbol` cannot be the zero address\\n\\n            * `_mintParams.amount` cannot be the zero address\\n\\n            * `_mintParams.to` cannot be the zero address\\n\\n            * `_lzEndpoint` cannot be the zero address\\n\\n            * `_srcChainId` cannot be the zero address\\n\\n\\n        * @param _mintParams The mint parameters\\n        * @param _lzEndpoint The endpoint of the Lazynode\\n        * @param _srcChainId The source chain id\\n        * @return token The address of the new OmniToken\\n    */\\n    function createOmniToken(\\n        Structs.MintObj memory _mintParams,\\n        address _lzEndpoint,\\n        uint16 _srcChainId\\n    ) external returns (address token) {  // TODO: onlyRouter\\n        token  = omniTokens[_mintParams.srcToken][_srcChainId];\\n        if (token != address(0x0)) return token;\\n\\n        OmniToken newToken = new OmniToken{salt: keccak256(abi.encodePacked(_mintParams.srcToken))}(\\n            _mintParams.name,\\n            _mintParams.symbol,\\n            _mintParams.amount,\\n            _mintParams.to,\\n            _lzEndpoint\\n        );\\n        token = address(newToken);\\n\\n        omniTokens[_mintParams.srcToken][_srcChainId] = token;\\n        sourceTokens[token][_srcChainId] = _mintParams.srcToken;\\n        emit TokenCreated(_mintParams.srcToken, _srcChainId, token);\\n    }\\n    function omniMint(address _srcToken, uint16 _dstChainId, uint256 _amount, address _to) external onlyRouter override returns (address token) {\\n        //todo: v0.2: TYPES=2\\n        return address(0x0);\\n    }\\n    function omniBurn(address _omniToken, uint256 _amount, address _from) external onlyRouter override {\\n        //todo: v0.3: TYPES=3\\n    }\\n\\n    //DAO\\n    function requestAddSourceTokens(\\n        address[] calldata _srcTokens,\\n        uint16[] calldata _srcChainIds,\\n        address _omniToken\\n    ) external onlyTimeLock {\\n        // TODO: alternative to addSourceToken -- 1\\n        require(_srcTokens.length == _srcChainIds.length, \\\"OCPTokenManager: invalid input\\\");\\n        for (uint256 i = 0; i < _srcTokens.length; i++) {\\n            sourceTokens[_srcTokens[i]][_srcChainIds[i]] = _omniToken;\\n        }\\n    }\\n    function approveSourceTokens(address[] calldata _omniTokens, uint16 _srcChainId, address[] calldata _srcTokens) external onlyTimeLock {\\n        // TODO: alternative to addSourceToken -- 2\\n        require(_omniTokens.length == _srcTokens.length, \\\"OCPTokenManager: invalid input\\\");\\n        for (uint256 i = 0; i < _omniTokens.length; i++) {\\n            sourceTokens[_omniTokens[i]][_srcChainId] = _srcTokens[i];\\n        }\\n    }\\n    function updateRouter(address _router) external onlyTimeLock {\\n        router = _router;\\n    }\\n    function updateTimeLock(address _timeLock) external onlyTimeLock {\\n        timeLock = _timeLock;\\n    }\\n}\\n\",\"keccak256\":\"0xad70fb79dba3972b5d62677f807fdf218202ba1307a252ee374cc448479619dd\",\"license\":\"MIT\"},\"contracts/entity/OmniToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\nimport \\\"@layerzerolabs/solidity-examples/contracts/token/oft/OFT.sol\\\";\\nimport \\\"../interfaces/IOCPOmniTokenManager.sol\\\";\\nimport \\\"../interfaces/IOCPBridge.sol\\\";\\ncontract OmniToken is OFT {\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _mintAmount,\\n        address _to,\\n        address _lzEndpoint\\n    ) OFT (_name, _symbol, _lzEndpoint) {\\n        if (_mintAmount > 0) _mint(_to, _mintAmount);\\n    }\\n    function mint(address account, uint256 amount) external onlyOwner {\\n        _mint(account, amount);\\n    }\\n    function burn(address account, uint256 amount) external onlyOwner {\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x63860b4f70834f25007c37f50906dddac2bcfd634def4f6103916e4f05856e74\",\"license\":\"MIT\"},\"contracts/interfaces/IOCPBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\nimport \\\"../libraries/Structs.sol\\\";\\ninterface IOCPBridge {\\n    function omniMint(\\n        uint16 _remoteChainId,\\n        address payable _refundAddress,\\n        uint8 _type,\\n        Structs.MintObj memory _mintParams,\\n        bytes memory _payload,\\n        Structs.LzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _remoteChainId,\\n        uint8 _type,\\n        bytes calldata _userPayload,\\n        Structs.LzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xdb25467d0eb86862b606e021183cba688a3285f3f66010783449d140c85b5f37\",\"license\":\"MIT\"},\"contracts/interfaces/IOCPOmniTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\nimport \\\"../libraries/Structs.sol\\\";\\ninterface IOCPOmniTokenManager {\\n    function omniTokens(address _srcToken, uint16 _chainId) external view returns (address token);\\n    function sourceTokens(address _omniToken, uint16 _chainId) external view returns (address token);\\n    function createOmniToken(Structs.MintObj memory _mintParams, address _lzEndpoint, uint16 _srcChainId) external returns (address token);\\n    function omniMint(address _srcToken, uint16 _dstChainId, uint256 _amount, address _to) external returns (address token);\\n    function omniBurn(address _omniToken, uint256 _amount, address _from) external;\\n}\\n\",\"keccak256\":\"0x55b686d6d20b32145c6ae766aae482669106d8c392b6905c67b7f3ed1b01691a\",\"license\":\"MIT\"},\"contracts/libraries/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary Structs {\\n\\n    struct LzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    struct MintObj {\\n        address srcToken;\\n        uint256 amount;\\n        address to;\\n        string name;\\n        string symbol;\\n    }\\n\\n    struct RedeemObj {\\n        address srcToken;\\n        uint16 dstChainId;\\n        uint256 amount;\\n        address to;\\n    }\\n\\n    struct CachedMint {\\n        address token;\\n        uint256 amount;\\n        address to;\\n        bytes payload;\\n    }\\n}\\n\",\"keccak256\":\"0xedd9de0bae1bbb43a7e7fca674b89c387ebc94a53403c65f56924b69a6ba0a4c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600180546001600160a01b03191633179055614754806100326000396000f3fe60806040523480156200001157600080fd5b5060043610620000b75760003560e01c8063c851cc32116200007a578063c851cc32146200016d578063d085835a1462000184578063d157fcea1462000198578063d2ede8df14620001af578063eb56f96014620001e6578063f887ea4014620001fd57600080fd5b80631d64ee4e14620000bc5780632a530ad014620000ef5780633584c86e14620001085780634f077eea146200011f578063a22304ed1462000156575b600080fd5b620000d3620000cd366004620007dc565b62000211565b6040516001600160a01b03909116815260200160405180910390f35b62000106620001003660046200091d565b6200037e565b005b6200010662000119366004620009a7565b620004b0565b620000d362000130366004620009c5565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b6200010662000167366004620009fd565b620004ff565b620001066200017e366004620009a7565b62000531565b600154620000d3906001600160a01b031681565b62000106620001a936600462000a35565b62000580565b620000d3620001c0366004620009c5565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b620000d3620001f736600462000ac2565b6200068e565b600054620000d3906001600160a01b031681565b82516001600160a01b03908116600090815260026020908152604080832061ffff86168452909152902054168062000377578351604051600091620002709160200160609190911b6bffffffffffffffffffffffff1916815260140190565b60405160208183030381529060405280519060200120856060015186608001518760200151886040015188604051620002a990620006c7565b620002b995949392919062000b5e565b8190604051809103906000f5905080158015620002da573d6000803e3d6000fd5b5085516001600160a01b03908116600090815260026020908152604080832061ffff891680855290835281842080548688166001600160a01b031991821681179092558c5182875260038652848720848852909552838620805495881695909116949094179093558a5191519597508796509194919316917f6792e3997f0d21e021aae79214c14b0e0c997897f87804942fde7f7ce42a6ea791a4505b9392505050565b6001546001600160a01b03163314620003b45760405162461bcd60e51b8152600401620003ab9062000baf565b60405180910390fd5b838214620003d65760405162461bcd60e51b8152600401620003ab9062000bfa565b60005b84811015620004a8578160036000888885818110620003fc57620003fc62000c31565b9050602002016020810190620004139190620009a7565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008686858181106200044a576200044a62000c31565b905060200201602081019062000461919062000c47565b61ffff168152602081019190915260400160002080546001600160a01b0319166001600160a01b0392909216919091179055806200049f8162000c65565b915050620003d9565b505050505050565b6001546001600160a01b03163314620004dd5760405162461bcd60e51b8152600401620003ab9062000baf565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146200052c5760405162461bcd60e51b8152600401620003ab9062000c8d565b505050565b6001546001600160a01b031633146200055e5760405162461bcd60e51b8152600401620003ab9062000baf565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b03163314620005ad5760405162461bcd60e51b8152600401620003ab9062000baf565b838114620005cf5760405162461bcd60e51b8152600401620003ab9062000bfa565b60005b84811015620004a857828282818110620005f057620005f062000c31565b9050602002016020810190620006079190620009a7565b6003600088888581811062000620576200062062000c31565b9050602002016020810190620006379190620009a7565b6001600160a01b0390811682526020808301939093526040918201600090812061ffff8a168252909352912080546001600160a01b0319169290911691909117905580620006858162000c65565b915050620005d2565b600080546001600160a01b03163314620006bc5760405162461bcd60e51b8152600401620003ab9062000c8d565b506000949350505050565b613a488062000cd783390190565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715620007115762000711620006d5565b60405290565b80356001600160a01b03811681146200072f57600080fd5b919050565b600082601f8301126200074657600080fd5b813567ffffffffffffffff80821115620007645762000764620006d5565b604051601f8301601f19908116603f011681019082821181831017156200078f576200078f620006d5565b81604052838152866020858801011115620007a957600080fd5b836020870160208301376000602085830101528094505050505092915050565b803561ffff811681146200072f57600080fd5b600080600060608486031215620007f257600080fd5b833567ffffffffffffffff808211156200080b57600080fd5b9085019060a082880312156200082057600080fd5b6200082a620006eb565b620008358362000717565b8152602083013560208201526200084f6040840162000717565b60408201526060830135828111156200086757600080fd5b620008758982860162000734565b6060830152506080830135828111156200088e57600080fd5b6200089c8982860162000734565b6080830152509450620008b59150506020850162000717565b9150620008c560408501620007c9565b90509250925092565b60008083601f840112620008e157600080fd5b50813567ffffffffffffffff811115620008fa57600080fd5b6020830191508360208260051b85010111156200091657600080fd5b9250929050565b6000806000806000606086880312156200093657600080fd5b853567ffffffffffffffff808211156200094f57600080fd5b6200095d89838a01620008ce565b909750955060208801359150808211156200097757600080fd5b506200098688828901620008ce565b90945092506200099b90506040870162000717565b90509295509295909350565b600060208284031215620009ba57600080fd5b620003778262000717565b60008060408385031215620009d957600080fd5b620009e48362000717565b9150620009f460208401620007c9565b90509250929050565b60008060006060848603121562000a1357600080fd5b62000a1e8462000717565b925060208401359150620008c56040850162000717565b60008060008060006060868803121562000a4e57600080fd5b853567ffffffffffffffff8082111562000a6757600080fd5b62000a7589838a01620008ce565b909750955085915062000a8b60208901620007c9565b9450604088013591508082111562000aa257600080fd5b5062000ab188828901620008ce565b969995985093965092949392505050565b6000806000806080858703121562000ad957600080fd5b62000ae48562000717565b935062000af460208601620007c9565b92506040850135915062000b0b6060860162000717565b905092959194509250565b6000815180845260005b8181101562000b3e5760208185018101518683018201520162000b20565b506000602082860101526020601f19601f83011685010191505092915050565b60a08152600062000b7360a083018862000b16565b828103602084015262000b87818862000b16565b604084019690965250506001600160a01b039283166060820152911660809091015292915050565b6020808252602b908201527f4f4350546f6b656e4d616e616765723a2063616c6c6572206973206e6f74207460408201526a68652074696d656c6f636b60a81b606082015260800190565b6020808252601e908201527f4f4350546f6b656e4d616e616765723a20696e76616c696420696e7075740000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121562000c5a57600080fd5b6200037782620007c9565b60006001820162000c8657634e487b7160e01b600052601160045260246000fd5b5060010190565b60208082526029908201527f4f4350546f6b656e4d616e616765723a2063616c6c6572206973206e6f7420746040820152683432903937baba32b960b91b60608201526080019056fe60a06040523480156200001157600080fd5b5060405162003a4838038062003a48833981016040819052620000349162000299565b848482828282808062000047336200009a565b6001600160a01b031660805250600a9050620000648382620003c0565b50600b620000738282620003c0565b50505050505060008311156200008f576200008f8284620000ea565b5050505050620004b4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038216620001455760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b80600960008282546200015991906200048c565b90915550506001600160a01b0382166000818152600760209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001df57600080fd5b81516001600160401b0380821115620001fc57620001fc620001b7565b604051601f8301601f19908116603f01168101908282118183101715620002275762000227620001b7565b816040528381526020925086838588010111156200024457600080fd5b600091505b8382101562000268578582018301518183018401529082019062000249565b600093810190920192909252949350505050565b80516001600160a01b03811681146200029457600080fd5b919050565b600080600080600060a08688031215620002b257600080fd5b85516001600160401b0380821115620002ca57600080fd5b620002d889838a01620001cd565b96506020880151915080821115620002ef57600080fd5b50620002fe88828901620001cd565b9450506040860151925062000316606087016200027c565b915062000326608087016200027c565b90509295509295909350565b600181811c908216806200034757607f821691505b6020821081036200036857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001b257600081815260208120601f850160051c81016020861015620003975750805b601f850160051c820191505b81811015620003b857828155600101620003a3565b505050505050565b81516001600160401b03811115620003dc57620003dc620001b7565b620003f481620003ed845462000332565b846200036e565b602080601f8311600181146200042c5760008415620004135750858301515b600019600386901b1c1916600185901b178555620003b8565b600085815260208120601f198616915b828110156200045d578886015182559484019460019091019084016200043c565b50858210156200047c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115620004ae57634e487b7160e01b600052601160045260246000fd5b92915050565b6080516135406200050860003960008181610752015281816108cd01528181610bec01528181610cac01528181610d4a01528181610efd01528181611448015281816118f301526124e801526135406000f3fe6080604052600436106102875760003560e01c80637533d7881161015a578063baf3292d116100c1578063eab45d9c1161007a578063eab45d9c1461081d578063eb8d72b71461083d578063ed629c5c1461085d578063f2fde38b14610877578063f5ecbdbc14610897578063fc0c546a146108b757600080fd5b8063baf3292d14610774578063c446183414610794578063cbed8b9c146107aa578063d1deba1f146107ca578063dd62ed3e146107dd578063df2a5b3b146107fd57600080fd5b80639dc29fac116101135780639dc29fac146106a05780639f38369a146106c0578063a457c2d7146106e0578063a6c3d16514610700578063a9059cbb14610720578063b353aaa71461074057600080fd5b80637533d788146105cc5780638cfd8f5c146105ec5780638da5cb5b146106245780639358928b14610656578063950c8a741461066b57806395d89b411461068b57600080fd5b806339509351116101fe5780634c42899a116101b75780634c42899a146104d757806351905636146104ff5780635b8c41e61461051257806366ad5c8a1461056157806370a0823114610581578063715018a6146105b757600080fd5b806339509351146104155780633d8b38f6146104355780633f1f4fa41461045557806340c10f191461048257806342d65a8d146104a257806344770515146104c257600080fd5b80630df37483116102505780630df374831461034557806310ddb1371461036557806318160ddd1461038557806323b872dd146103a45780632a205e3d146103c4578063313ce567146103f957600080fd5b80621d35671461028c57806301ffc9a7146102ae57806306fdde03146102e357806307e0db1714610305578063095ea7b314610325575b600080fd5b34801561029857600080fd5b506102ac6102a7366004612886565b6108ca565b005b3480156102ba57600080fd5b506102ce6102c936600461291b565b610afb565b60405190151581526020015b60405180910390f35b3480156102ef57600080fd5b506102f8610b39565b6040516102da9190612995565b34801561031157600080fd5b506102ac6103203660046129a8565b610bcb565b34801561033157600080fd5b506102ce6103403660046129da565b610c54565b34801561035157600080fd5b506102ac610360366004612a06565b610c6c565b34801561037157600080fd5b506102ac6103803660046129a8565b610c8b565b34801561039157600080fd5b506009545b6040519081526020016102da565b3480156103b057600080fd5b506102ce6103bf366004612a24565b610ce3565b3480156103d057600080fd5b506103e46103df366004612a75565b610d07565b604080519283526020830191909152016102da565b34801561040557600080fd5b50604051601281526020016102da565b34801561042157600080fd5b506102ce6104303660046129da565b610dda565b34801561044157600080fd5b506102ce610450366004612b14565b610dfc565b34801561046157600080fd5b506103966104703660046129a8565b60036020526000908152604090205481565b34801561048e57600080fd5b506102ac61049d3660046129da565b610ec8565b3480156104ae57600080fd5b506102ac6104bd366004612b14565b610ede565b3480156104ce57600080fd5b50610396600081565b3480156104e357600080fd5b506104ec600081565b60405161ffff90911681526020016102da565b6102ac61050d366004612b68565b610f64565b34801561051e57600080fd5b5061039661052d366004612c9e565b6005602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561056d57600080fd5b506102ac61057c366004612886565b610fe9565b34801561058d57600080fd5b5061039661059c366004612d40565b6001600160a01b031660009081526007602052604090205490565b3480156105c357600080fd5b506102ac6110c5565b3480156105d857600080fd5b506102f86105e73660046129a8565b6110d9565b3480156105f857600080fd5b50610396610607366004612d5d565b600260209081526000928352604080842090915290825290205481565b34801561063057600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016102da565b34801561066257600080fd5b50610396611173565b34801561067757600080fd5b5060045461063e906001600160a01b031681565b34801561069757600080fd5b506102f8611183565b3480156106ac57600080fd5b506102ac6106bb3660046129da565b611192565b3480156106cc57600080fd5b506102f86106db3660046129a8565b6111a4565b3480156106ec57600080fd5b506102ce6106fb3660046129da565b6112ba565b34801561070c57600080fd5b506102ac61071b366004612b14565b611335565b34801561072c57600080fd5b506102ce61073b3660046129da565b6113be565b34801561074c57600080fd5b5061063e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561078057600080fd5b506102ac61078f366004612d40565b6113cc565b3480156107a057600080fd5b5061039661271081565b3480156107b657600080fd5b506102ac6107c5366004612d96565b611429565b6102ac6107d8366004612886565b6114b3565b3480156107e957600080fd5b506103966107f8366004612e08565b6116c9565b34801561080957600080fd5b506102ac610818366004612e36565b6116f4565b34801561082957600080fd5b506102ac610838366004612e66565b6117a6565b34801561084957600080fd5b506102ac610858366004612b14565b6117ef565b34801561086957600080fd5b506006546102ce9060ff1681565b34801561088357600080fd5b506102ac610892366004612d40565b611849565b3480156108a357600080fd5b506102f86108b2366004612e81565b6118c2565b3480156108c357600080fd5b503061063e565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146109475760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff86166000908152600160205260408120805461096590612ed2565b80601f016020809104026020016040519081016040528092919081815260200182805461099190612ed2565b80156109de5780601f106109b3576101008083540402835291602001916109de565b820191906000526020600020905b8154815290600101906020018083116109c157829003601f168201915b505050505090508051868690501480156109f9575060008151115b8015610a21575080516020820120604051610a179088908890612f0c565b6040518091039020145b610a7c5760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6044820152651b9d1c9858dd60d21b606482015260840161093e565b610af28787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a93509150889088908190840183828082843760009201919091525061197392505050565b50505050505050565b60006001600160e01b031982161580610b2457506001600160e01b031982166336372b0760e01b145b80610b335750610b33826119ec565b92915050565b6060600a8054610b4890612ed2565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7490612ed2565b8015610bc15780601f10610b9657610100808354040283529160200191610bc1565b820191906000526020600020905b815481529060010190602001808311610ba457829003601f168201915b5050505050905090565b610bd3611a21565b6040516307e0db1760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b158015610c3957600080fd5b505af1158015610c4d573d6000803e3d6000fd5b5050505050565b600033610c62818585611a7b565b5060019392505050565b610c74611a21565b61ffff909116600090815260036020526040902055565b610c93611a21565b6040516310ddb13760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb13790602401610c1f565b600033610cf1858285611ba0565b610cfc858585611c1a565b506001949350505050565b600080600080898989604051602001610d239493929190612f45565b60408051601f198184030181529082905263040a7bb160e41b825291506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340a7bb1090610d89908d90309086908c908c908c90600401612f74565b6040805180830381865afa158015610da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc99190612fca565b925092505097509795505050505050565b600033610c62818585610ded83836116c9565b610df79190613004565b611a7b565b61ffff831660009081526001602052604081208054829190610e1d90612ed2565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4990612ed2565b8015610e965780601f10610e6b57610100808354040283529160200191610e96565b820191906000526020600020905b815481529060010190602001808311610e7957829003601f168201915b505050505090508383604051610ead929190612f0c565b60405180910390208180519060200120149150509392505050565b610ed0611a21565b610eda8282611db3565b5050565b610ee6611a21565b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d90610f3690869086908690600401613017565b600060405180830381600087803b158015610f5057600080fd5b505af1158015610af2573d6000803e3d6000fd5b610fde898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528c93508b92508a918a908a9081908401838280828437600092019190915250611e6292505050565b505050505050505050565b3330146110475760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b606482015260840161093e565b6110bd8686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f890181900481028201810190925287815289935091508790879081908401838280828437600092019190915250611f0992505050565b505050505050565b6110cd611a21565b6110d76000611f70565b565b600160205260009081526040902080546110f290612ed2565b80601f016020809104026020016040519081016040528092919081815260200182805461111e90612ed2565b801561116b5780601f106111405761010080835404028352916020019161116b565b820191906000526020600020905b81548152906001019060200180831161114e57829003601f168201915b505050505081565b600061117e60095490565b905090565b6060600b8054610b4890612ed2565b61119a611a21565b610eda8282611fc0565b61ffff81166000908152600160205260408120805460609291906111c790612ed2565b80601f01602080910402602001604051908101604052809291908181526020018280546111f390612ed2565b80156112405780601f1061121557610100808354040283529160200191611240565b820191906000526020600020905b81548152906001019060200180831161122357829003601f168201915b5050505050905080516000036112985760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f7264000000604482015260640161093e565b6112b36000601483516112ab9190613035565b8391906120df565b9392505050565b600033816112c882866116c9565b9050838110156113285760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161093e565b610cfc8286868403611a7b565b61133d611a21565b81813060405160200161135293929190613048565b60408051601f1981840301815291815261ffff851660009081526001602052209061137d90826130c9565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce8383836040516113b193929190613017565b60405180910390a1505050565b600033610c62818585611c1a565b6113d4611a21565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b906020015b60405180910390a150565b611431611a21565b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c906114859088908890889088908890600401613182565b600060405180830381600087803b15801561149f57600080fd5b505af1158015610fde573d6000803e3d6000fd5b61ffff861660009081526005602052604080822090516114d69088908890612f0c565b90815260408051602092819003830190206001600160401b038716600090815292529020549050806115565760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b606482015260840161093e565b808383604051611567929190612f0c565b6040518091039020146115c65760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b606482015260840161093e565b61ffff871660009081526005602052604080822090516115e99089908990612f0c565b90815260408051602092819003830181206001600160401b038916600090815290845282902093909355601f88018290048202830182019052868252611681918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a935091508890889081908401838280828437600092019190915250611f0992505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e587878787856040516116b89594939291906131bb565b60405180910390a150505050505050565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b6116fc611a21565b600081116117445760405162461bcd60e51b81526020600482015260156024820152744c7a4170703a20696e76616c6964206d696e47617360581b604482015260640161093e565b61ffff83811660008181526002602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac0906060016113b1565b6117ae611a21565b6006805460ff19168215159081179091556040519081527f1584ad594a70cbe1e6515592e1272a987d922b097ead875069cebe8b40c004a49060200161141e565b6117f7611a21565b61ffff831660009081526001602052604090206118158284836131f6565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab8383836040516113b193929190613017565b611851611a21565b6001600160a01b0381166118b65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161093e565b6118bf81611f70565b50565b604051633d7b2f6f60e21b815261ffff808616600483015284166024820152306044820152606481018290526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90608401600060405180830381865afa158015611942573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261196a91908101906132fc565b95945050505050565b6000806119d65a60966366ad5c8a60e01b8989898960405160240161199b9493929190613330565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152309291906121ec565b91509150816110bd576110bd8686868685612276565b60006001600160e01b03198216630a72677560e11b1480610b3357506301ffc9a760e01b6001600160e01b0319831614610b33565b6000546001600160a01b031633146110d75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161093e565b6001600160a01b038316611add5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161093e565b6001600160a01b038216611b3e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161093e565b6001600160a01b0383811660008181526008602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000611bac84846116c9565b90506000198114611c145781811015611c075760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161093e565b611c148484848403611a7b565b50505050565b6001600160a01b038316611c7e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161093e565b6001600160a01b038216611ce05760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161093e565b6001600160a01b03831660009081526007602052604090205481811015611d585760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161093e565b6001600160a01b0380851660008181526007602052604080822086860390559286168082529083902080548601905591516000805160206134eb83398151915290611da69086815260200190565b60405180910390a3611c14565b6001600160a01b038216611e095760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161093e565b8060096000828254611e1b9190613004565b90915550506001600160a01b0382166000818152600760209081526040808320805486019055518481526000805160206134eb833981519152910160405180910390a35050565b611e70866000836000612313565b6000611e7e8888888861238d565b90506000808783604051602001611e979392919061336e565b6040516020818303038152906040529050611eb68882878787346123bf565b886001600160a01b03168861ffff167f39a4c66499bcf4b56d79f0dde8ed7a9d4925a0df55825206b2b8531e202be0d08985604051611ef692919061339b565b60405180910390a3505050505050505050565b602081015161ffff8116611f2857611f2385858585612564565b610c4d565b60405162461bcd60e51b815260206004820152601c60248201527f4f4654436f72653a20756e6b6e6f776e207061636b6574207479706500000000604482015260640161093e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0382166120205760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161093e565b6001600160a01b038216600090815260076020526040902054818110156120945760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161093e565b6001600160a01b03831660008181526007602090815260408083208686039055600980548790039055518581529192916000805160206134eb8339815191529101611b93565b505050565b6060816120ed81601f613004565b101561212c5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015260640161093e565b6121368284613004565b8451101561217a5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b604482015260640161093e565b60608215801561219957604051915060008252602082016040526121e3565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156121d25780518352602092830192016121ba565b5050858452601f01601f1916604052505b50949350505050565b6000606060008060008661ffff166001600160401b0381111561221157612211612c31565b6040519080825280601f01601f19166020018201604052801561223b576020820181803683370190505b50905060008087516020890160008d8df191503d92508683111561225d578692505b828152826000602083013e909890975095505050505050565b8180519060200120600560008761ffff1661ffff168152602001908152602001600020856040516122a791906133bd565b9081526040805191829003602090810183206001600160401b0388166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c9061230490879087908790879087906133d9565b60405180910390a15050505050565b60065460ff161561232f5761232a848484846125ee565b611c14565b815115611c145760405162461bcd60e51b815260206004820152602660248201527f4f4654436f72653a205f61646170746572506172616d73206d7573742062652060448201526532b6b83a3c9760d11b606482015260840161093e565b6000336001600160a01b03861681146123ab576123ab868285611ba0565b6123b58684611fc0565b5090949350505050565b61ffff8616600090815260016020526040812080546123dd90612ed2565b80601f016020809104026020016040519081016040528092919081815260200182805461240990612ed2565b80156124565780601f1061242b57610100808354040283529160200191612456565b820191906000526020600020905b81548152906001019060200180831161243957829003601f168201915b5050505050905080516000036124c75760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201526f61207472757374656420736f7572636560801b606482015260840161093e565b6124d28787516126cd565b60405162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c5803100908490612529908b9086908c908c908c908c90600401613437565b6000604051808303818588803b15801561254257600080fd5b505af1158015612556573d6000803e3d6000fd5b505050505050505050505050565b6000808280602001905181019061257b9190613491565b90935091506000905061258e838261273e565b905061259b8782846127a3565b9150806001600160a01b03168761ffff167fbf551ec93859b170f9b2141bd9298bf3f64322c6f7beb2543a0cb669834118bf846040516125dd91815260200190565b60405180910390a350505050505050565b60006125f9836127b6565b61ffff80871660009081526002602090815260408083209389168352929052908120549192509061262b908490613004565b90506000811161267d5760405162461bcd60e51b815260206004820152601a60248201527f4c7a4170703a206d696e4761734c696d6974206e6f7420736574000000000000604482015260640161093e565b808210156110bd5760405162461bcd60e51b815260206004820152601b60248201527f4c7a4170703a20676173206c696d697420697320746f6f206c6f770000000000604482015260640161093e565b61ffff8216600090815260036020526040812054908190036126ee57506127105b808211156120da5760405162461bcd60e51b815260206004820181905260248201527f4c7a4170703a207061796c6f61642073697a6520697320746f6f206c61726765604482015260640161093e565b600061274b826014613004565b835110156127935760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b604482015260640161093e565b500160200151600160601b900490565b60006127af8383611db3565b5092915050565b600060228251101561280a5760405162461bcd60e51b815260206004820152601c60248201527f4c7a4170703a20696e76616c69642061646170746572506172616d7300000000604482015260640161093e565b506022015190565b61ffff811681146118bf57600080fd5b60008083601f84011261283457600080fd5b5081356001600160401b0381111561284b57600080fd5b60208301915083602082850101111561286357600080fd5b9250929050565b80356001600160401b038116811461288157600080fd5b919050565b6000806000806000806080878903121561289f57600080fd5b86356128aa81612812565b955060208701356001600160401b03808211156128c657600080fd5b6128d28a838b01612822565b90975095508591506128e660408a0161286a565b945060608901359150808211156128fc57600080fd5b5061290989828a01612822565b979a9699509497509295939492505050565b60006020828403121561292d57600080fd5b81356001600160e01b0319811681146112b357600080fd5b60005b83811015612960578181015183820152602001612948565b50506000910152565b60008151808452612981816020860160208601612945565b601f01601f19169290920160200192915050565b6020815260006112b36020830184612969565b6000602082840312156129ba57600080fd5b81356112b381612812565b6001600160a01b03811681146118bf57600080fd5b600080604083850312156129ed57600080fd5b82356129f8816129c5565b946020939093013593505050565b60008060408385031215612a1957600080fd5b82356129f881612812565b600080600060608486031215612a3957600080fd5b8335612a44816129c5565b92506020840135612a54816129c5565b929592945050506040919091013590565b8035801515811461288157600080fd5b600080600080600080600060a0888a031215612a9057600080fd5b8735612a9b81612812565b965060208801356001600160401b0380821115612ab757600080fd5b612ac38b838c01612822565b909850965060408a01359550869150612ade60608b01612a65565b945060808a0135915080821115612af457600080fd5b50612b018a828b01612822565b989b979a50959850939692959293505050565b600080600060408486031215612b2957600080fd5b8335612b3481612812565b925060208401356001600160401b03811115612b4f57600080fd5b612b5b86828701612822565b9497909650939450505050565b600080600080600080600080600060e08a8c031215612b8657600080fd5b8935612b91816129c5565b985060208a0135612ba181612812565b975060408a01356001600160401b0380821115612bbd57600080fd5b612bc98d838e01612822565b909950975060608c0135965060808c01359150612be5826129c5565b90945060a08b013590612bf7826129c5565b90935060c08b01359080821115612c0d57600080fd5b50612c1a8c828d01612822565b915080935050809150509295985092959850929598565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612c6f57612c6f612c31565b604052919050565b60006001600160401b03821115612c9057612c90612c31565b50601f01601f191660200190565b600080600060608486031215612cb357600080fd5b8335612cbe81612812565b925060208401356001600160401b03811115612cd957600080fd5b8401601f81018613612cea57600080fd5b8035612cfd612cf882612c77565b612c47565b818152876020838501011115612d1257600080fd5b81602084016020830137600060208383010152809450505050612d376040850161286a565b90509250925092565b600060208284031215612d5257600080fd5b81356112b3816129c5565b60008060408385031215612d7057600080fd5b8235612d7b81612812565b91506020830135612d8b81612812565b809150509250929050565b600080600080600060808688031215612dae57600080fd5b8535612db981612812565b94506020860135612dc981612812565b93506040860135925060608601356001600160401b03811115612deb57600080fd5b612df788828901612822565b969995985093965092949392505050565b60008060408385031215612e1b57600080fd5b8235612e26816129c5565b91506020830135612d8b816129c5565b600080600060608486031215612e4b57600080fd5b8335612e5681612812565b92506020840135612a5481612812565b600060208284031215612e7857600080fd5b6112b382612a65565b60008060008060808587031215612e9757600080fd5b8435612ea281612812565b93506020850135612eb281612812565b92506040850135612ec2816129c5565b9396929550929360600135925050565b600181811c90821680612ee657607f821691505b602082108103612f0657634e487b7160e01b600052602260045260246000fd5b50919050565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff85168152606060208201526000612f63606083018587612f1c565b905082604083015295945050505050565b61ffff871681526001600160a01b038616602082015260a060408201819052600090612fa290830187612969565b85151560608401528281036080840152612fbd818587612f1c565b9998505050505050505050565b60008060408385031215612fdd57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b80820180821115610b3357610b33612fee565b61ffff8416815260406020820152600061196a604083018486612f1c565b81810381811115610b3357610b33612fee565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b601f8211156120da57600081815260208120601f850160051c810160208610156130955750805b601f850160051c820191505b818110156110bd578281556001016130a1565b600019600383901b1c191660019190911b1790565b81516001600160401b038111156130e2576130e2612c31565b6130f6816130f08454612ed2565b8461306e565b602080601f83116001811461312557600084156131135750858301515b61311d85826130b4565b8655506110bd565b600085815260208120601f198616915b8281101561315457888601518255948401946001909101908401613135565b50858210156131725787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600061ffff8088168352808716602084015250846040830152608060608301526131b0608083018486612f1c565b979650505050505050565b61ffff861681526080602082015260006131d9608083018688612f1c565b6001600160401b0394909416604083015250606001529392505050565b6001600160401b0383111561320d5761320d612c31565b6132218361321b8354612ed2565b8361306e565b6000601f84116001811461324f576000851561323d5750838201355b61324786826130b4565b845550610c4d565b600083815260209020601f19861690835b828110156132805786850135825560209485019460019092019101613260565b508682101561329d5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b600082601f8301126132c057600080fd5b81516132ce612cf882612c77565b8181528460208386010111156132e357600080fd5b6132f4826020830160208701612945565b949350505050565b60006020828403121561330e57600080fd5b81516001600160401b0381111561332457600080fd5b6132f4848285016132af565b61ffff8516815260806020820152600061334d6080830186612969565b6001600160401b038516604084015282810360608401526131b08185612969565b61ffff8416815260606020820152600061338b6060830185612969565b9050826040830152949350505050565b6040815260006133ae6040830185612969565b90508260208301529392505050565b600082516133cf818460208701612945565b9190910192915050565b61ffff8616815260a0602082015260006133f660a0830187612969565b6001600160401b038616604084015282810360608401526134178186612969565b9050828103608084015261342b8185612969565b98975050505050505050565b61ffff8716815260c06020820152600061345460c0830188612969565b82810360408401526134668188612969565b6001600160a01b0387811660608601528616608085015283810360a08501529050612fbd8185612969565b6000806000606084860312156134a657600080fd5b83516134b181612812565b60208501519093506001600160401b038111156134cd57600080fd5b6134d9868287016132af565b92505060408401519050925092509256feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122000af738f4f0dbd5a092769879e972bd02031f95837cd4364f0b8711c72e3e15664736f6c63430008110033a26469706673582212200c81dbc1ffaddec181cc194bec601c93a4a7768037931055a5df75e834051c1a64736f6c63430008110033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000b75760003560e01c8063c851cc32116200007a578063c851cc32146200016d578063d085835a1462000184578063d157fcea1462000198578063d2ede8df14620001af578063eb56f96014620001e6578063f887ea4014620001fd57600080fd5b80631d64ee4e14620000bc5780632a530ad014620000ef5780633584c86e14620001085780634f077eea146200011f578063a22304ed1462000156575b600080fd5b620000d3620000cd366004620007dc565b62000211565b6040516001600160a01b03909116815260200160405180910390f35b62000106620001003660046200091d565b6200037e565b005b6200010662000119366004620009a7565b620004b0565b620000d362000130366004620009c5565b60026020908152600092835260408084209091529082529020546001600160a01b031681565b6200010662000167366004620009fd565b620004ff565b620001066200017e366004620009a7565b62000531565b600154620000d3906001600160a01b031681565b62000106620001a936600462000a35565b62000580565b620000d3620001c0366004620009c5565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b620000d3620001f736600462000ac2565b6200068e565b600054620000d3906001600160a01b031681565b82516001600160a01b03908116600090815260026020908152604080832061ffff86168452909152902054168062000377578351604051600091620002709160200160609190911b6bffffffffffffffffffffffff1916815260140190565b60405160208183030381529060405280519060200120856060015186608001518760200151886040015188604051620002a990620006c7565b620002b995949392919062000b5e565b8190604051809103906000f5905080158015620002da573d6000803e3d6000fd5b5085516001600160a01b03908116600090815260026020908152604080832061ffff891680855290835281842080548688166001600160a01b031991821681179092558c5182875260038652848720848852909552838620805495881695909116949094179093558a5191519597508796509194919316917f6792e3997f0d21e021aae79214c14b0e0c997897f87804942fde7f7ce42a6ea791a4505b9392505050565b6001546001600160a01b03163314620003b45760405162461bcd60e51b8152600401620003ab9062000baf565b60405180910390fd5b838214620003d65760405162461bcd60e51b8152600401620003ab9062000bfa565b60005b84811015620004a8578160036000888885818110620003fc57620003fc62000c31565b9050602002016020810190620004139190620009a7565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008686858181106200044a576200044a62000c31565b905060200201602081019062000461919062000c47565b61ffff168152602081019190915260400160002080546001600160a01b0319166001600160a01b0392909216919091179055806200049f8162000c65565b915050620003d9565b505050505050565b6001546001600160a01b03163314620004dd5760405162461bcd60e51b8152600401620003ab9062000baf565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146200052c5760405162461bcd60e51b8152600401620003ab9062000c8d565b505050565b6001546001600160a01b031633146200055e5760405162461bcd60e51b8152600401620003ab9062000baf565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b03163314620005ad5760405162461bcd60e51b8152600401620003ab9062000baf565b838114620005cf5760405162461bcd60e51b8152600401620003ab9062000bfa565b60005b84811015620004a857828282818110620005f057620005f062000c31565b9050602002016020810190620006079190620009a7565b6003600088888581811062000620576200062062000c31565b9050602002016020810190620006379190620009a7565b6001600160a01b0390811682526020808301939093526040918201600090812061ffff8a168252909352912080546001600160a01b0319169290911691909117905580620006858162000c65565b915050620005d2565b600080546001600160a01b03163314620006bc5760405162461bcd60e51b8152600401620003ab9062000c8d565b506000949350505050565b613a488062000cd783390190565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715620007115762000711620006d5565b60405290565b80356001600160a01b03811681146200072f57600080fd5b919050565b600082601f8301126200074657600080fd5b813567ffffffffffffffff80821115620007645762000764620006d5565b604051601f8301601f19908116603f011681019082821181831017156200078f576200078f620006d5565b81604052838152866020858801011115620007a957600080fd5b836020870160208301376000602085830101528094505050505092915050565b803561ffff811681146200072f57600080fd5b600080600060608486031215620007f257600080fd5b833567ffffffffffffffff808211156200080b57600080fd5b9085019060a082880312156200082057600080fd5b6200082a620006eb565b620008358362000717565b8152602083013560208201526200084f6040840162000717565b60408201526060830135828111156200086757600080fd5b620008758982860162000734565b6060830152506080830135828111156200088e57600080fd5b6200089c8982860162000734565b6080830152509450620008b59150506020850162000717565b9150620008c560408501620007c9565b90509250925092565b60008083601f840112620008e157600080fd5b50813567ffffffffffffffff811115620008fa57600080fd5b6020830191508360208260051b85010111156200091657600080fd5b9250929050565b6000806000806000606086880312156200093657600080fd5b853567ffffffffffffffff808211156200094f57600080fd5b6200095d89838a01620008ce565b909750955060208801359150808211156200097757600080fd5b506200098688828901620008ce565b90945092506200099b90506040870162000717565b90509295509295909350565b600060208284031215620009ba57600080fd5b620003778262000717565b60008060408385031215620009d957600080fd5b620009e48362000717565b9150620009f460208401620007c9565b90509250929050565b60008060006060848603121562000a1357600080fd5b62000a1e8462000717565b925060208401359150620008c56040850162000717565b60008060008060006060868803121562000a4e57600080fd5b853567ffffffffffffffff8082111562000a6757600080fd5b62000a7589838a01620008ce565b909750955085915062000a8b60208901620007c9565b9450604088013591508082111562000aa257600080fd5b5062000ab188828901620008ce565b969995985093965092949392505050565b6000806000806080858703121562000ad957600080fd5b62000ae48562000717565b935062000af460208601620007c9565b92506040850135915062000b0b6060860162000717565b905092959194509250565b6000815180845260005b8181101562000b3e5760208185018101518683018201520162000b20565b506000602082860101526020601f19601f83011685010191505092915050565b60a08152600062000b7360a083018862000b16565b828103602084015262000b87818862000b16565b604084019690965250506001600160a01b039283166060820152911660809091015292915050565b6020808252602b908201527f4f4350546f6b656e4d616e616765723a2063616c6c6572206973206e6f74207460408201526a68652074696d656c6f636b60a81b606082015260800190565b6020808252601e908201527f4f4350546f6b656e4d616e616765723a20696e76616c696420696e7075740000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121562000c5a57600080fd5b6200037782620007c9565b60006001820162000c8657634e487b7160e01b600052601160045260246000fd5b5060010190565b60208082526029908201527f4f4350546f6b656e4d616e616765723a2063616c6c6572206973206e6f7420746040820152683432903937baba32b960b91b60608201526080019056fe60a06040523480156200001157600080fd5b5060405162003a4838038062003a48833981016040819052620000349162000299565b848482828282808062000047336200009a565b6001600160a01b031660805250600a9050620000648382620003c0565b50600b620000738282620003c0565b50505050505060008311156200008f576200008f8284620000ea565b5050505050620004b4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038216620001455760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b80600960008282546200015991906200048c565b90915550506001600160a01b0382166000818152600760209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001df57600080fd5b81516001600160401b0380821115620001fc57620001fc620001b7565b604051601f8301601f19908116603f01168101908282118183101715620002275762000227620001b7565b816040528381526020925086838588010111156200024457600080fd5b600091505b8382101562000268578582018301518183018401529082019062000249565b600093810190920192909252949350505050565b80516001600160a01b03811681146200029457600080fd5b919050565b600080600080600060a08688031215620002b257600080fd5b85516001600160401b0380821115620002ca57600080fd5b620002d889838a01620001cd565b96506020880151915080821115620002ef57600080fd5b50620002fe88828901620001cd565b9450506040860151925062000316606087016200027c565b915062000326608087016200027c565b90509295509295909350565b600181811c908216806200034757607f821691505b6020821081036200036857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001b257600081815260208120601f850160051c81016020861015620003975750805b601f850160051c820191505b81811015620003b857828155600101620003a3565b505050505050565b81516001600160401b03811115620003dc57620003dc620001b7565b620003f481620003ed845462000332565b846200036e565b602080601f8311600181146200042c5760008415620004135750858301515b600019600386901b1c1916600185901b178555620003b8565b600085815260208120601f198616915b828110156200045d578886015182559484019460019091019084016200043c565b50858210156200047c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115620004ae57634e487b7160e01b600052601160045260246000fd5b92915050565b6080516135406200050860003960008181610752015281816108cd01528181610bec01528181610cac01528181610d4a01528181610efd01528181611448015281816118f301526124e801526135406000f3fe6080604052600436106102875760003560e01c80637533d7881161015a578063baf3292d116100c1578063eab45d9c1161007a578063eab45d9c1461081d578063eb8d72b71461083d578063ed629c5c1461085d578063f2fde38b14610877578063f5ecbdbc14610897578063fc0c546a146108b757600080fd5b8063baf3292d14610774578063c446183414610794578063cbed8b9c146107aa578063d1deba1f146107ca578063dd62ed3e146107dd578063df2a5b3b146107fd57600080fd5b80639dc29fac116101135780639dc29fac146106a05780639f38369a146106c0578063a457c2d7146106e0578063a6c3d16514610700578063a9059cbb14610720578063b353aaa71461074057600080fd5b80637533d788146105cc5780638cfd8f5c146105ec5780638da5cb5b146106245780639358928b14610656578063950c8a741461066b57806395d89b411461068b57600080fd5b806339509351116101fe5780634c42899a116101b75780634c42899a146104d757806351905636146104ff5780635b8c41e61461051257806366ad5c8a1461056157806370a0823114610581578063715018a6146105b757600080fd5b806339509351146104155780633d8b38f6146104355780633f1f4fa41461045557806340c10f191461048257806342d65a8d146104a257806344770515146104c257600080fd5b80630df37483116102505780630df374831461034557806310ddb1371461036557806318160ddd1461038557806323b872dd146103a45780632a205e3d146103c4578063313ce567146103f957600080fd5b80621d35671461028c57806301ffc9a7146102ae57806306fdde03146102e357806307e0db1714610305578063095ea7b314610325575b600080fd5b34801561029857600080fd5b506102ac6102a7366004612886565b6108ca565b005b3480156102ba57600080fd5b506102ce6102c936600461291b565b610afb565b60405190151581526020015b60405180910390f35b3480156102ef57600080fd5b506102f8610b39565b6040516102da9190612995565b34801561031157600080fd5b506102ac6103203660046129a8565b610bcb565b34801561033157600080fd5b506102ce6103403660046129da565b610c54565b34801561035157600080fd5b506102ac610360366004612a06565b610c6c565b34801561037157600080fd5b506102ac6103803660046129a8565b610c8b565b34801561039157600080fd5b506009545b6040519081526020016102da565b3480156103b057600080fd5b506102ce6103bf366004612a24565b610ce3565b3480156103d057600080fd5b506103e46103df366004612a75565b610d07565b604080519283526020830191909152016102da565b34801561040557600080fd5b50604051601281526020016102da565b34801561042157600080fd5b506102ce6104303660046129da565b610dda565b34801561044157600080fd5b506102ce610450366004612b14565b610dfc565b34801561046157600080fd5b506103966104703660046129a8565b60036020526000908152604090205481565b34801561048e57600080fd5b506102ac61049d3660046129da565b610ec8565b3480156104ae57600080fd5b506102ac6104bd366004612b14565b610ede565b3480156104ce57600080fd5b50610396600081565b3480156104e357600080fd5b506104ec600081565b60405161ffff90911681526020016102da565b6102ac61050d366004612b68565b610f64565b34801561051e57600080fd5b5061039661052d366004612c9e565b6005602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561056d57600080fd5b506102ac61057c366004612886565b610fe9565b34801561058d57600080fd5b5061039661059c366004612d40565b6001600160a01b031660009081526007602052604090205490565b3480156105c357600080fd5b506102ac6110c5565b3480156105d857600080fd5b506102f86105e73660046129a8565b6110d9565b3480156105f857600080fd5b50610396610607366004612d5d565b600260209081526000928352604080842090915290825290205481565b34801561063057600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016102da565b34801561066257600080fd5b50610396611173565b34801561067757600080fd5b5060045461063e906001600160a01b031681565b34801561069757600080fd5b506102f8611183565b3480156106ac57600080fd5b506102ac6106bb3660046129da565b611192565b3480156106cc57600080fd5b506102f86106db3660046129a8565b6111a4565b3480156106ec57600080fd5b506102ce6106fb3660046129da565b6112ba565b34801561070c57600080fd5b506102ac61071b366004612b14565b611335565b34801561072c57600080fd5b506102ce61073b3660046129da565b6113be565b34801561074c57600080fd5b5061063e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561078057600080fd5b506102ac61078f366004612d40565b6113cc565b3480156107a057600080fd5b5061039661271081565b3480156107b657600080fd5b506102ac6107c5366004612d96565b611429565b6102ac6107d8366004612886565b6114b3565b3480156107e957600080fd5b506103966107f8366004612e08565b6116c9565b34801561080957600080fd5b506102ac610818366004612e36565b6116f4565b34801561082957600080fd5b506102ac610838366004612e66565b6117a6565b34801561084957600080fd5b506102ac610858366004612b14565b6117ef565b34801561086957600080fd5b506006546102ce9060ff1681565b34801561088357600080fd5b506102ac610892366004612d40565b611849565b3480156108a357600080fd5b506102f86108b2366004612e81565b6118c2565b3480156108c357600080fd5b503061063e565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146109475760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff86166000908152600160205260408120805461096590612ed2565b80601f016020809104026020016040519081016040528092919081815260200182805461099190612ed2565b80156109de5780601f106109b3576101008083540402835291602001916109de565b820191906000526020600020905b8154815290600101906020018083116109c157829003601f168201915b505050505090508051868690501480156109f9575060008151115b8015610a21575080516020820120604051610a179088908890612f0c565b6040518091039020145b610a7c5760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6044820152651b9d1c9858dd60d21b606482015260840161093e565b610af28787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a93509150889088908190840183828082843760009201919091525061197392505050565b50505050505050565b60006001600160e01b031982161580610b2457506001600160e01b031982166336372b0760e01b145b80610b335750610b33826119ec565b92915050565b6060600a8054610b4890612ed2565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7490612ed2565b8015610bc15780601f10610b9657610100808354040283529160200191610bc1565b820191906000526020600020905b815481529060010190602001808311610ba457829003601f168201915b5050505050905090565b610bd3611a21565b6040516307e0db1760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b158015610c3957600080fd5b505af1158015610c4d573d6000803e3d6000fd5b5050505050565b600033610c62818585611a7b565b5060019392505050565b610c74611a21565b61ffff909116600090815260036020526040902055565b610c93611a21565b6040516310ddb13760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb13790602401610c1f565b600033610cf1858285611ba0565b610cfc858585611c1a565b506001949350505050565b600080600080898989604051602001610d239493929190612f45565b60408051601f198184030181529082905263040a7bb160e41b825291506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340a7bb1090610d89908d90309086908c908c908c90600401612f74565b6040805180830381865afa158015610da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc99190612fca565b925092505097509795505050505050565b600033610c62818585610ded83836116c9565b610df79190613004565b611a7b565b61ffff831660009081526001602052604081208054829190610e1d90612ed2565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4990612ed2565b8015610e965780601f10610e6b57610100808354040283529160200191610e96565b820191906000526020600020905b815481529060010190602001808311610e7957829003601f168201915b505050505090508383604051610ead929190612f0c565b60405180910390208180519060200120149150509392505050565b610ed0611a21565b610eda8282611db3565b5050565b610ee6611a21565b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d90610f3690869086908690600401613017565b600060405180830381600087803b158015610f5057600080fd5b505af1158015610af2573d6000803e3d6000fd5b610fde898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528c93508b92508a918a908a9081908401838280828437600092019190915250611e6292505050565b505050505050505050565b3330146110475760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b606482015260840161093e565b6110bd8686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f890181900481028201810190925287815289935091508790879081908401838280828437600092019190915250611f0992505050565b505050505050565b6110cd611a21565b6110d76000611f70565b565b600160205260009081526040902080546110f290612ed2565b80601f016020809104026020016040519081016040528092919081815260200182805461111e90612ed2565b801561116b5780601f106111405761010080835404028352916020019161116b565b820191906000526020600020905b81548152906001019060200180831161114e57829003601f168201915b505050505081565b600061117e60095490565b905090565b6060600b8054610b4890612ed2565b61119a611a21565b610eda8282611fc0565b61ffff81166000908152600160205260408120805460609291906111c790612ed2565b80601f01602080910402602001604051908101604052809291908181526020018280546111f390612ed2565b80156112405780601f1061121557610100808354040283529160200191611240565b820191906000526020600020905b81548152906001019060200180831161122357829003601f168201915b5050505050905080516000036112985760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f7264000000604482015260640161093e565b6112b36000601483516112ab9190613035565b8391906120df565b9392505050565b600033816112c882866116c9565b9050838110156113285760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161093e565b610cfc8286868403611a7b565b61133d611a21565b81813060405160200161135293929190613048565b60408051601f1981840301815291815261ffff851660009081526001602052209061137d90826130c9565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce8383836040516113b193929190613017565b60405180910390a1505050565b600033610c62818585611c1a565b6113d4611a21565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b906020015b60405180910390a150565b611431611a21565b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c906114859088908890889088908890600401613182565b600060405180830381600087803b15801561149f57600080fd5b505af1158015610fde573d6000803e3d6000fd5b61ffff861660009081526005602052604080822090516114d69088908890612f0c565b90815260408051602092819003830190206001600160401b038716600090815292529020549050806115565760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b606482015260840161093e565b808383604051611567929190612f0c565b6040518091039020146115c65760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b606482015260840161093e565b61ffff871660009081526005602052604080822090516115e99089908990612f0c565b90815260408051602092819003830181206001600160401b038916600090815290845282902093909355601f88018290048202830182019052868252611681918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a935091508890889081908401838280828437600092019190915250611f0992505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e587878787856040516116b89594939291906131bb565b60405180910390a150505050505050565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b6116fc611a21565b600081116117445760405162461bcd60e51b81526020600482015260156024820152744c7a4170703a20696e76616c6964206d696e47617360581b604482015260640161093e565b61ffff83811660008181526002602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac0906060016113b1565b6117ae611a21565b6006805460ff19168215159081179091556040519081527f1584ad594a70cbe1e6515592e1272a987d922b097ead875069cebe8b40c004a49060200161141e565b6117f7611a21565b61ffff831660009081526001602052604090206118158284836131f6565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab8383836040516113b193929190613017565b611851611a21565b6001600160a01b0381166118b65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161093e565b6118bf81611f70565b50565b604051633d7b2f6f60e21b815261ffff808616600483015284166024820152306044820152606481018290526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90608401600060405180830381865afa158015611942573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261196a91908101906132fc565b95945050505050565b6000806119d65a60966366ad5c8a60e01b8989898960405160240161199b9493929190613330565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152309291906121ec565b91509150816110bd576110bd8686868685612276565b60006001600160e01b03198216630a72677560e11b1480610b3357506301ffc9a760e01b6001600160e01b0319831614610b33565b6000546001600160a01b031633146110d75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161093e565b6001600160a01b038316611add5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161093e565b6001600160a01b038216611b3e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161093e565b6001600160a01b0383811660008181526008602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000611bac84846116c9565b90506000198114611c145781811015611c075760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161093e565b611c148484848403611a7b565b50505050565b6001600160a01b038316611c7e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161093e565b6001600160a01b038216611ce05760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161093e565b6001600160a01b03831660009081526007602052604090205481811015611d585760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161093e565b6001600160a01b0380851660008181526007602052604080822086860390559286168082529083902080548601905591516000805160206134eb83398151915290611da69086815260200190565b60405180910390a3611c14565b6001600160a01b038216611e095760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161093e565b8060096000828254611e1b9190613004565b90915550506001600160a01b0382166000818152600760209081526040808320805486019055518481526000805160206134eb833981519152910160405180910390a35050565b611e70866000836000612313565b6000611e7e8888888861238d565b90506000808783604051602001611e979392919061336e565b6040516020818303038152906040529050611eb68882878787346123bf565b886001600160a01b03168861ffff167f39a4c66499bcf4b56d79f0dde8ed7a9d4925a0df55825206b2b8531e202be0d08985604051611ef692919061339b565b60405180910390a3505050505050505050565b602081015161ffff8116611f2857611f2385858585612564565b610c4d565b60405162461bcd60e51b815260206004820152601c60248201527f4f4654436f72653a20756e6b6e6f776e207061636b6574207479706500000000604482015260640161093e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0382166120205760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161093e565b6001600160a01b038216600090815260076020526040902054818110156120945760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161093e565b6001600160a01b03831660008181526007602090815260408083208686039055600980548790039055518581529192916000805160206134eb8339815191529101611b93565b505050565b6060816120ed81601f613004565b101561212c5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015260640161093e565b6121368284613004565b8451101561217a5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b604482015260640161093e565b60608215801561219957604051915060008252602082016040526121e3565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156121d25780518352602092830192016121ba565b5050858452601f01601f1916604052505b50949350505050565b6000606060008060008661ffff166001600160401b0381111561221157612211612c31565b6040519080825280601f01601f19166020018201604052801561223b576020820181803683370190505b50905060008087516020890160008d8df191503d92508683111561225d578692505b828152826000602083013e909890975095505050505050565b8180519060200120600560008761ffff1661ffff168152602001908152602001600020856040516122a791906133bd565b9081526040805191829003602090810183206001600160401b0388166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c9061230490879087908790879087906133d9565b60405180910390a15050505050565b60065460ff161561232f5761232a848484846125ee565b611c14565b815115611c145760405162461bcd60e51b815260206004820152602660248201527f4f4654436f72653a205f61646170746572506172616d73206d7573742062652060448201526532b6b83a3c9760d11b606482015260840161093e565b6000336001600160a01b03861681146123ab576123ab868285611ba0565b6123b58684611fc0565b5090949350505050565b61ffff8616600090815260016020526040812080546123dd90612ed2565b80601f016020809104026020016040519081016040528092919081815260200182805461240990612ed2565b80156124565780601f1061242b57610100808354040283529160200191612456565b820191906000526020600020905b81548152906001019060200180831161243957829003601f168201915b5050505050905080516000036124c75760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201526f61207472757374656420736f7572636560801b606482015260840161093e565b6124d28787516126cd565b60405162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c5803100908490612529908b9086908c908c908c908c90600401613437565b6000604051808303818588803b15801561254257600080fd5b505af1158015612556573d6000803e3d6000fd5b505050505050505050505050565b6000808280602001905181019061257b9190613491565b90935091506000905061258e838261273e565b905061259b8782846127a3565b9150806001600160a01b03168761ffff167fbf551ec93859b170f9b2141bd9298bf3f64322c6f7beb2543a0cb669834118bf846040516125dd91815260200190565b60405180910390a350505050505050565b60006125f9836127b6565b61ffff80871660009081526002602090815260408083209389168352929052908120549192509061262b908490613004565b90506000811161267d5760405162461bcd60e51b815260206004820152601a60248201527f4c7a4170703a206d696e4761734c696d6974206e6f7420736574000000000000604482015260640161093e565b808210156110bd5760405162461bcd60e51b815260206004820152601b60248201527f4c7a4170703a20676173206c696d697420697320746f6f206c6f770000000000604482015260640161093e565b61ffff8216600090815260036020526040812054908190036126ee57506127105b808211156120da5760405162461bcd60e51b815260206004820181905260248201527f4c7a4170703a207061796c6f61642073697a6520697320746f6f206c61726765604482015260640161093e565b600061274b826014613004565b835110156127935760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b604482015260640161093e565b500160200151600160601b900490565b60006127af8383611db3565b5092915050565b600060228251101561280a5760405162461bcd60e51b815260206004820152601c60248201527f4c7a4170703a20696e76616c69642061646170746572506172616d7300000000604482015260640161093e565b506022015190565b61ffff811681146118bf57600080fd5b60008083601f84011261283457600080fd5b5081356001600160401b0381111561284b57600080fd5b60208301915083602082850101111561286357600080fd5b9250929050565b80356001600160401b038116811461288157600080fd5b919050565b6000806000806000806080878903121561289f57600080fd5b86356128aa81612812565b955060208701356001600160401b03808211156128c657600080fd5b6128d28a838b01612822565b90975095508591506128e660408a0161286a565b945060608901359150808211156128fc57600080fd5b5061290989828a01612822565b979a9699509497509295939492505050565b60006020828403121561292d57600080fd5b81356001600160e01b0319811681146112b357600080fd5b60005b83811015612960578181015183820152602001612948565b50506000910152565b60008151808452612981816020860160208601612945565b601f01601f19169290920160200192915050565b6020815260006112b36020830184612969565b6000602082840312156129ba57600080fd5b81356112b381612812565b6001600160a01b03811681146118bf57600080fd5b600080604083850312156129ed57600080fd5b82356129f8816129c5565b946020939093013593505050565b60008060408385031215612a1957600080fd5b82356129f881612812565b600080600060608486031215612a3957600080fd5b8335612a44816129c5565b92506020840135612a54816129c5565b929592945050506040919091013590565b8035801515811461288157600080fd5b600080600080600080600060a0888a031215612a9057600080fd5b8735612a9b81612812565b965060208801356001600160401b0380821115612ab757600080fd5b612ac38b838c01612822565b909850965060408a01359550869150612ade60608b01612a65565b945060808a0135915080821115612af457600080fd5b50612b018a828b01612822565b989b979a50959850939692959293505050565b600080600060408486031215612b2957600080fd5b8335612b3481612812565b925060208401356001600160401b03811115612b4f57600080fd5b612b5b86828701612822565b9497909650939450505050565b600080600080600080600080600060e08a8c031215612b8657600080fd5b8935612b91816129c5565b985060208a0135612ba181612812565b975060408a01356001600160401b0380821115612bbd57600080fd5b612bc98d838e01612822565b909950975060608c0135965060808c01359150612be5826129c5565b90945060a08b013590612bf7826129c5565b90935060c08b01359080821115612c0d57600080fd5b50612c1a8c828d01612822565b915080935050809150509295985092959850929598565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612c6f57612c6f612c31565b604052919050565b60006001600160401b03821115612c9057612c90612c31565b50601f01601f191660200190565b600080600060608486031215612cb357600080fd5b8335612cbe81612812565b925060208401356001600160401b03811115612cd957600080fd5b8401601f81018613612cea57600080fd5b8035612cfd612cf882612c77565b612c47565b818152876020838501011115612d1257600080fd5b81602084016020830137600060208383010152809450505050612d376040850161286a565b90509250925092565b600060208284031215612d5257600080fd5b81356112b3816129c5565b60008060408385031215612d7057600080fd5b8235612d7b81612812565b91506020830135612d8b81612812565b809150509250929050565b600080600080600060808688031215612dae57600080fd5b8535612db981612812565b94506020860135612dc981612812565b93506040860135925060608601356001600160401b03811115612deb57600080fd5b612df788828901612822565b969995985093965092949392505050565b60008060408385031215612e1b57600080fd5b8235612e26816129c5565b91506020830135612d8b816129c5565b600080600060608486031215612e4b57600080fd5b8335612e5681612812565b92506020840135612a5481612812565b600060208284031215612e7857600080fd5b6112b382612a65565b60008060008060808587031215612e9757600080fd5b8435612ea281612812565b93506020850135612eb281612812565b92506040850135612ec2816129c5565b9396929550929360600135925050565b600181811c90821680612ee657607f821691505b602082108103612f0657634e487b7160e01b600052602260045260246000fd5b50919050565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff85168152606060208201526000612f63606083018587612f1c565b905082604083015295945050505050565b61ffff871681526001600160a01b038616602082015260a060408201819052600090612fa290830187612969565b85151560608401528281036080840152612fbd818587612f1c565b9998505050505050505050565b60008060408385031215612fdd57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b80820180821115610b3357610b33612fee565b61ffff8416815260406020820152600061196a604083018486612f1c565b81810381811115610b3357610b33612fee565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b601f8211156120da57600081815260208120601f850160051c810160208610156130955750805b601f850160051c820191505b818110156110bd578281556001016130a1565b600019600383901b1c191660019190911b1790565b81516001600160401b038111156130e2576130e2612c31565b6130f6816130f08454612ed2565b8461306e565b602080601f83116001811461312557600084156131135750858301515b61311d85826130b4565b8655506110bd565b600085815260208120601f198616915b8281101561315457888601518255948401946001909101908401613135565b50858210156131725787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600061ffff8088168352808716602084015250846040830152608060608301526131b0608083018486612f1c565b979650505050505050565b61ffff861681526080602082015260006131d9608083018688612f1c565b6001600160401b0394909416604083015250606001529392505050565b6001600160401b0383111561320d5761320d612c31565b6132218361321b8354612ed2565b8361306e565b6000601f84116001811461324f576000851561323d5750838201355b61324786826130b4565b845550610c4d565b600083815260209020601f19861690835b828110156132805786850135825560209485019460019092019101613260565b508682101561329d5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b600082601f8301126132c057600080fd5b81516132ce612cf882612c77565b8181528460208386010111156132e357600080fd5b6132f4826020830160208701612945565b949350505050565b60006020828403121561330e57600080fd5b81516001600160401b0381111561332457600080fd5b6132f4848285016132af565b61ffff8516815260806020820152600061334d6080830186612969565b6001600160401b038516604084015282810360608401526131b08185612969565b61ffff8416815260606020820152600061338b6060830185612969565b9050826040830152949350505050565b6040815260006133ae6040830185612969565b90508260208301529392505050565b600082516133cf818460208701612945565b9190910192915050565b61ffff8616815260a0602082015260006133f660a0830187612969565b6001600160401b038616604084015282810360608401526134178186612969565b9050828103608084015261342b8185612969565b98975050505050505050565b61ffff8716815260c06020820152600061345460c0830188612969565b82810360408401526134668188612969565b6001600160a01b0387811660608601528616608085015283810360a08501529050612fbd8185612969565b6000806000606084860312156134a657600080fd5b83516134b181612812565b60208501519093506001600160401b038111156134cd57600080fd5b6134d9868287016132af565b92505060408401519050925092509256feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122000af738f4f0dbd5a092769879e972bd02031f95837cd4364f0b8711c72e3e15664736f6c63430008110033a26469706673582212200c81dbc1ffaddec181cc194bec601c93a4a7768037931055a5df75e834051c1a64736f6c63430008110033",
  "devdoc": {
    "author": "Muller",
    "details": "This contract is used to manage the OmniTokensIt is used by the router to create OmniTokens and mint/burn tokens",
    "kind": "dev",
    "methods": {
      "createOmniToken((address,uint256,address,string,string),address,uint16)": {
        "details": "Create a new OmniToken Requirements: `_mintParams.srcToken` cannot be the zero address `_mintParams.srcChainId` cannot be the zero address `_mintParams.name` cannot be the zero address `_mintParams.symbol` cannot be the zero address `_mintParams.amount` cannot be the zero address `_mintParams.to` cannot be the zero address `_lzEndpoint` cannot be the zero address `_srcChainId` cannot be the zero address",
        "params": {
          "_lzEndpoint": "The endpoint of the Lazynode",
          "_mintParams": "The mint parameters",
          "_srcChainId": "The source chain id"
        },
        "returns": {
          "token": "The address of the new OmniToken"
        }
      }
    },
    "title": "OCPOmniTokenManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5592,
        "contract": "contracts/OCPOmniTokenManager.sol:OCPOmniTokenManager",
        "label": "router",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5594,
        "contract": "contracts/OCPOmniTokenManager.sol:OCPOmniTokenManager",
        "label": "timeLock",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5609,
        "contract": "contracts/OCPOmniTokenManager.sol:OCPOmniTokenManager",
        "label": "omniTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint16,t_address))"
      },
      {
        "astId": 5615,
        "contract": "contracts/OCPOmniTokenManager.sol:OCPOmniTokenManager",
        "label": "sourceTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint16,t_address))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint16,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint16 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_address)"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}